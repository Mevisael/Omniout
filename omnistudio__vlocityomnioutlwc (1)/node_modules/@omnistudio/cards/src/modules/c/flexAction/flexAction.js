/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import Action from "c/action";
import sldsTemplate from "./flexAction_slds.html";
import ndsTemplate from "./flexAction_nds.html";
import { api, track } from "lwc";
import { BaseFlexElementMixin } from "c/baseFlexElementMixin";
import { find, get } from "c/lodash";
import {
  isCommunityPage,
  getActions,
  namespace,
  fetchCustomLabels,
  getCommunityPrefix
} from "c/utility";

export default class FlexAction extends BaseFlexElementMixin(Action) {
  _disabled = false;
  uninterpolatedDisabled;
  @api get disabled() {
    return this._disabled;
  }
  set disabled(val) {
    if (typeof val === "string" && val.indexOf("{") !== -1) {
      this.uninterpolatedDisabled = val;
      val = this.interpolateMergeField(val);
    }
    this._disabled = this.getBooleanValue(val);
  }
  @api get flyoutChannel() {
    return this._flyoutChannelName;
  }
  set flyoutChannel(val) {
    this._flyoutChannelName = val ? this.interpolateMergeField(val) : val;
  }
  @api get actionList() {
    return this._actionList;
  }
  set actionList(val) {
    val = val ? (typeof val === "string" ? this.validJson(val) : val) : [];
    if (val?.length) {
      this._actionList = [...val];
      this.init();
    }
  }

  @api get record() {
    return this._record;
  }
  set record(val) {
    this._record = val;
    this.updateValue();
  }

  @api get label() {
    return this._label;
  }
  set label(val) {
    if (val) {
      this.uninterpolatedLabel = val;
      this._label = this.interpolateMergeField(val);
    }
  }

  @api get iconName() {
    return this._iconName;
  }
  set iconName(val) {
    if (val) {
      val = !/^icon-/.test(val) ? val.replace("-", ":") : val;
      this.uninterpolatedIconName = val;
      this._iconName = this.interpolateMergeField(val);
    }
  }

  @api get flyoutDetails() {
    return this._flyoutDetails;
  }
  set flyoutDetails(val) {
    val = val ? (typeof val === "string" ? this.validJson(val) : val) : {};
    this._flyoutDetails = val;
    if (val.openFlyoutIn === "Popover") {
      this.isPopoverFlyout = true;
    } else if (val.openFlyoutIn === "Modal") {
      this.isModalFlyout = true;
    }
  }

  _ariaLabel;

  @api
  get ariaLabel() {
    return this._ariaLabel;
  }

  set ariaLabel(val) {
    if (val) {
      this._ariaLabel = this.interpolateMergeField(val);
    }
  }

  get linkLabel() {
    return this.ariaLabel || this.label;
  }

  @track _label = "";
  @track isSelectCard = false;
  @track imageRef;
  @track _iconName = "standard-default";
  @track _actionList = [];
  @track _flyoutChannelName = "";
  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  validJson(str) {
    try {
      if (str.charAt(0) === "\\") {
        str = str.substring(1);
      }
      return JSON.parse(str);
    } catch (e) {
      return [];
    }
  }

  updateValue() {
    if (this.uninterpolatedLabel)
      this._label = this.interpolateMergeField(this.uninterpolatedLabel);
    if (this.uninterpolatedIconName)
      this._iconName = this.interpolateMergeField(this.uninterpolatedIconName);
    if (this.uninterpolatedDisabled) {
      const buttonDisable = this.interpolateMergeField(
        this.uninterpolatedDisabled
      );
      this._disabled = this.getBooleanValue(buttonDisable);
    }
  }

  triggerRender() {
    this.setProperty("_allMergeFields");
    if (this.card) {
      this.cardsListLabel = this.card.selectedCardsLabel;
    }
    this.updateValue();
  }

  interpolateMergeField(stringToInterpolate) {
    if (stringToInterpolate && stringToInterpolate.indexOf("{") !== -1) {
      if (stringToInterpolate.charAt(0) === "\\") {
        stringToInterpolate = stringToInterpolate.substring(1);
      }
      return stringToInterpolate.replace(/\{(.*?)\}/g, (match, expr) => {
        let fieldValue = get(this.record, expr);
        if (
          this._allMergeFields &&
          (typeof fieldValue === "undefined" ||
            fieldValue === null ||
            (fieldValue &&
              typeof fieldValue === "string" &&
              fieldValue.indexOf("{") !== -1))
        ) {
          fieldValue = get(this._allMergeFields, expr);
        }
        return typeof fieldValue !== "undefined" ? fieldValue : "";
      });
    }
    return stringToInterpolate;
  }

  get showIcon() {
    return (this.hideActionIcon !== "true") & (this.hideActionIcon !== true);
  }

  reset() {
    this.imageRef = "";
    this.isSelectCard = false;
  }

  fireFlexAction() {
    let event = new CustomEvent("executeaction");
    this.dispatchEvent(event);
  }

  async init() {
    this.reset();
    const firstAction = this._actionList[0]?.stateAction;
    if (firstAction) {
      if (firstAction?.type === "Vlocity Action") {
        if (firstAction.fetchFromDS) {
          if (
            firstAction.name.match(/\{([a-zA-Z.0-9_]*)\}/g) &&
            this.stateObj
          ) {
            let actionName = firstAction.name.replace(/[{}]/g, "");
            actionName = get(this.stateObj, actionName);
            let allActions = await getActions(this.disableCache);
            let selectedAction = allActions[actionName];
            if (selectedAction) {
              let customLabel =
                selectedAction[namespace + "CustomLabelName__c"];
              if (customLabel) {
                let labelToInterpolate = `Label.${customLabel}`;
                let label = get(this.card, labelToInterpolate);
                if (!label) {
                  fetchCustomLabels([customLabel]).then(labels => {
                    this.label = labels ? labels[customLabel] : "";
                  });
                }
              } else {
                this.label = selectedAction.displayName;
              }
              this.iconName = selectedAction.vlocityIcon;
              this.setImgurl(selectedAction);
            }
          }
        } else {
          this.setImgurl(firstAction);
        }
      } else if (
        firstAction?.type === "cardAction" &&
        firstAction.eventName === "selectcards"
      ) {
        this.isSelectCard = true;
      }
    }
  }

  setImgurl(firstAction) {
    isCommunityPage().then(result => {
      this.isCommunity = result;
      if (firstAction.Attachments?.length) {
        this.imageRef =
          (this.isCommunity ? getCommunityPrefix() : "") +
          "/servlet/servlet.FileDownload?file=" +
          firstAction.Attachments[0].Id;
      } else if (firstAction.ContentDocumentLinks?.length) {
        let customIcon = find(firstAction.ContentDocumentLinks, {
          ContentDocument: { Title: firstAction.vlocityIcon }
        });
        this.imageRef =
          customIcon &&
          (this.isCommunity ? getCommunityPrefix() : "") +
            "/sfc/servlet.shepherd/version/renditionDownload?rendition=THUMB120BY90&versionId=" +
            customIcon.ContentDocument.LatestPublishedVersionId;
      }
    });
  }

  get buttonAriaLabel() {
    return this.ariaLabel || this.label;
  }

  getBooleanValue(value) {
    return (value === "false") !== Boolean(value);
  }
}
