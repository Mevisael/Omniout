/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import {
  getCardById,
  getCardsByNames,
  getActiveCardByName,
  getflexCardMetadata,
  getFileBasedCardsByNames,
  getLWCMetadataByBundleId
} from "c/flexCardUtils";
import { getCardObjectFields } from "./getCardObjectFields";

let _cardData = [];
let getCardsPromise = {};
let promiseArray = {};
let cardDefinition = {};

function isMetaData(Id) {
  return Id && typeof Id === "string" && Id.indexOf("flexmetadata") !== -1;
}

function getCardDataById(Id, nocache, metadataKey) {
  if (!_cardData[Id] || nocache) {
    getCardsPromise = new Promise(resolve => {
      if (!promiseArray[Id] || nocache) {
        let isFlexCardMetadata = isMetaData(Id);
        if (isFlexCardMetadata) {
          promiseArray[Id] = getflexCardMetadata({
            uniqueName: metadataKey
          }).then(data => {
            if (data && !data.Id) {
              data.Id = Id;
            }
            _cardData[Id] = data;
            setCardProperties(Id);
            return data;
          });
        } else {
          promiseArray[Id] = getCardById({ Id: Id }).then(data => {
            if (data) {
              let cardObject = getCardObjectFields(data);
              let def = data[cardObject.PropertySetConfig];
              if (def && def.indexOf('"element":"flexAction"')) {
                data[cardObject.PropertySetConfig] = def.replace(
                  /"element":"flexAction"/g,
                  '"element":"action"'
                );
              }
            }
            _cardData[Id] = data;
            setCardProperties(Id);
            return data;
          });
        }
      }
      resolve(promiseArray[Id]);
    });
  } else {
    getCardsPromise = new Promise(resolve => {
      resolve(_cardData[Id]);
    });
  }
  return getCardsPromise;
}

function setCardProperties(Id) {
  if (_cardData[Id]) {
    let cardObject = getCardObjectFields(_cardData[Id]);
    cardDefinition[Id] = _cardData[Id][cardObject.PropertySetConfig];
    cardDefinition[Id] =
      cardDefinition[Id] && typeof cardDefinition[Id] === "string"
        ? JSON.parse(cardDefinition[Id])
        : "";
  }
}

function getCardProperties(Id, key) {
  return cardDefinition[Id] ? cardDefinition[Id][key] : null;
}

function getCardsByName(name) {
  let getCardsList1 = getCardsByNames({
    cardNames: Array.isArray(name) ? name : [name]
  });
  let getCardsList2 = getFileBasedCardsByNames({
    cardNames: Array.isArray(name) ? name : [name]
  });
  return new Promise(resolve => {
    Promise.all([getCardsList1, getCardsList2]).then(data => {
      let cardslist = [];
      if (data?.length) {
        cardslist = [...data[0], ...data[1]];
      }
      resolve(cardslist);
    });
  });
}

function getActiveCardByNameFn(name) {
  if (!_cardData[name]) {
    getCardsPromise = new Promise(resolve => {
      if (!promiseArray[name]) {
        promiseArray[name] = getActiveCardByName({ Name: name }).then(data => {
          _cardData[name] = data;
          return data;
        });
      }
      resolve(promiseArray[name]);
    });
  } else {
    getCardsPromise = new Promise(resolve => {
      resolve(_cardData[name]);
    });
  }
  return getCardsPromise;
}

function setCardById(Id, card) {
  _cardData[Id] = card;
  setCardProperties(Id);
}

async function getLWCMetadataByBundle(id) {
  const resp = await getLWCMetadataByBundleId({ Id: id });
  let metaObj = {};
  if (resp) {
    for (const prop in resp) {
      metaObj[toCamelCase(prop)] = resp[prop];
    }
  }
  return metaObj;
}

function toCamelCase(str) {
  // Convert string from pascal case to camel case , ApiVersion --> apiVersion
  return str.charAt(0).toLowerCase() + str.slice(1);
}

export {
  getCardDataById,
  setCardById,
  getCardsByName,
  getActiveCardByNameFn,
  getCardProperties,
  getLWCMetadataByBundle
};
