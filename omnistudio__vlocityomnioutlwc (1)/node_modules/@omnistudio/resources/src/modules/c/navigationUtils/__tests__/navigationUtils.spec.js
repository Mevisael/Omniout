/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v109.0.0
 */
import { 
    AppPageReference, 
    CommNamedPageReference,
    ComponentPageReference,
    KnowledgeArticlePageReference,
    LoginPageReference,
    ManagedContentPageReference,
    NamedPageReference,
    NavItemPageReference,
    normalizeParams,
    ObjectPageReference,
    PageReference,
    parseParams,
    RecordPageReference,
    RelationshipPageReference,
    stringifyParams,
    WebPageReference } from 'c/navigationUtils';

const PARAM1 = 'PARAM1';
const PARAM2 = 'PARAM2';
const MOCK_STATE_PARAMS = `?c__mock1=${PARAM1}&c__mock2=${PARAM2}`;

describe('test navigationUtils', () => {

    describe('parseParams', () => {
        it('?abc=123', () => {
            expect(parseParams('?abc=123')).toEqual({
                abc: '123'
            });
        });

        it('abc=123', () => {
            expect(parseParams('abc=123')).toEqual({
                abc: '123'
            });
        });

        it('abc', () => {
            expect(parseParams('abc')).toEqual({
                abc: undefined
            });
        });

        it('abc=123&def=abc', () => {
            expect(parseParams('abc=123&def=abc')).toEqual({
                abc: '123',
                def: 'abc'
            });
        });

        it('abc=123&abc=abc', () => {
            expect(parseParams('abc=123&abc=abc')).toEqual({
                abc: ['123', 'abc']
            });
        });

        it('abc=123,abc', () => {
            expect(parseParams('abc=123,abc')).toEqual({
                abc: ['123', 'abc']
            });
        });

        it('abc=123&abc=abc&abc=def', () => {
            expect(parseParams('abc=123&abc=abc&abc=def')).toEqual({
                abc: ['123', 'abc', 'def']
            });
        });

        it('null', () => {
            expect(parseParams(null)).toEqual({
            });
        });

        it('no params', () => {
            expect(parseParams()).toEqual({
            });
        });
    });

    describe('stringifyParams', () => {

        it('simple one param', () => {
            expect(stringifyParams({ abc: '123' })).toEqual('?c__abc=123');
        });

        it('simple two param', () => {
            expect(stringifyParams({ abc: '123', def: 'abc' })).toEqual('?c__abc=123&c__def=abc');
        });

        it('one param with array', () => {
            expect(stringifyParams({ abc: ['123', 'abc'] })).toEqual('?c__abc=123,abc');
        });


        it('one param with array of 3 values', () => {
            expect(stringifyParams({ abc: ['123', 'abc', 'def'] })).toEqual('?c__abc=123,abc,def');
        });

        xit('key has = in name', () => {
            expect(stringifyParams({ "ab=c": '123' })).toEqual('?c__ab=c=123');
        });

        xit('value has & in name', () => {
            expect(stringifyParams({ "abc": '12&3' })).toEqual('?c__abc=12&3');
        });

        it('value is undefined', () => {
            expect(stringifyParams({ "abc": undefined })).toEqual('?');
        });
    });

    describe('normalizeParams', () => {

        it('removes namespace', () => {
            expect(normalizeParams({
                'c__abc': '123'
            })).toEqual({
                abc: '123'
            });
        });

        it('removes custom namespace', () => {
            expect(normalizeParams({
                'vlocity_ins__abc': '123'
            })).toEqual({
                abc: '123'
            });
        });

        it('no namespace', () => {
            expect(normalizeParams({
                'abc': '123'
            })).toEqual({
                abc: '123'
            });
        });

        xit('no args', () => {
            expect(normalizeParams()).toEqual({});
        });


    });

    describe('AppPageReference', () => {
        const MOCK_APP_NAME = 'MOCK_APP_NAME';
        const MOCK_TYPE = 'MOCK_TYPE';
        const MOCK_PAGE_REF = new PageReference(MOCK_TYPE, null, MOCK_STATE_PARAMS);
        
        const testObject = new AppPageReference(
            MOCK_APP_NAME,
            MOCK_PAGE_REF
        );
        
        it('sets type', () => {
            expect(testObject.type).toEqual('standard__app');
        });

        it('sets app target', () => {
            expect(testObject.attributes.appTarget).toEqual(MOCK_APP_NAME);
        });

        it('sets pageRef', () => {
            expect(testObject.attributes.pageRef).toEqual(expect.any(PageReference));
        });

        testStateParams(testObject.attributes.pageRef.state);

    });

    
    describe('ComponentPageReference', () => {
        const MOCK_COMPONENT_NAME = 'MOCK:COMPONENT_NAME';
        const testObject = new ComponentPageReference(MOCK_COMPONENT_NAME, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('standard__component');
        });

        it('sets component name', () => {
            expect(testObject.attributes.componentName).toEqual(MOCK_COMPONENT_NAME);
        });

        testStateParams(testObject.state);
    });

    describe('KnowledgeArticlePageReference', () => {
        const MOCK_ARTICLE_TYPE = 'MOCK_KA';
        const MOCK_ARTICLE_URL = 'mock/url';
        const testObject = new KnowledgeArticlePageReference(MOCK_ARTICLE_TYPE, MOCK_ARTICLE_URL, MOCK_STATE_PARAMS)
        
        it('sets type', () => {
            expect(testObject.type).toEqual('standard__knowledgeArticlePage');
        });
        
        it('sets article type', () => {
            expect(testObject.attributes.articleType).toEqual(MOCK_ARTICLE_TYPE);
        });

        it('sets article url', () => {
            expect(testObject.attributes.urlName).toEqual(MOCK_ARTICLE_URL);
        });

        testStateParams(testObject.state);
    });

    describe('LoginPageReference', () => {
        const MOCK_ACTION = 'login';
        const testObject = new LoginPageReference(MOCK_ACTION, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('comm__loginPage');
        });

        it('sets actionName', () => {
            expect(testObject.attributes.actionName).toEqual(MOCK_ACTION);
        });

        testStateParams(testObject.state);
    });

    describe('ManagedContentPageReference', () => {
        const MOCK_CONTENT_TYPE_NAME = 'MOCK_CONTENT_TYPE_NAME';
        const MOCK_CONTENT_KEY = 'MOCK_CONTENT_KEY'
        const testObject = new ManagedContentPageReference(MOCK_CONTENT_TYPE_NAME, MOCK_CONTENT_KEY, MOCK_STATE_PARAMS)
        
        it('sets type', () => {
            expect(testObject.type).toEqual('standard__managedContentPage');
        });
        
        it('sets contentTypeName', () => {
            expect(testObject.type).toEqual('standard__managedContentPage');
        });
        
        it('sets contentKey', () => {
            expect(testObject.type).toEqual('standard__managedContentPage');
        });

        testStateParams(testObject.state);
    });

    describe ('CommNamedPageReference', () => {
        const MOCK_PAGE_NAME = 'MOCK_PAGE_NAME';
        const testObject = new CommNamedPageReference(MOCK_PAGE_NAME, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('comm__namedPage');
        });

        it('sets name', () => {
            expect(testObject.attributes.name).toEqual(MOCK_PAGE_NAME);
        });

        testStateParams(testObject.state);
    });

    describe('NamedPageReference', () => {
        const MOCK_PAGE_NAME = 'MOCK_PAGE_NAME';
        const testObject = new NamedPageReference(MOCK_PAGE_NAME, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('standard__namedPage');
        });

        it('sets pageName', () => {
            expect(testObject.attributes.pageName).toEqual(MOCK_PAGE_NAME);
        });

        testStateParams(testObject.state);
    });

    describe('NavItemPageReference', () => {
        const MOCK_TAB_NAME = 'MOCK_TAB_NAME';
        const testObject = new NavItemPageReference(MOCK_TAB_NAME, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('standard__navItemPage');
        });
        
        it('sets apiName', () => {
            expect(testObject.attributes.apiName).toEqual(MOCK_TAB_NAME);
        });

        testStateParams(testObject.state);
    });

    describe('ObjectPageReference', () => {
        const MOCK_OBJECT_NAME = 'MOCK_OBJECT_NAME';
        const MOCK_ACTION = 'VIEW';
        const testObject = new ObjectPageReference(MOCK_OBJECT_NAME, MOCK_ACTION, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('standard__objectPage');
        });

        it('sets actionName', () => {
            expect(testObject.attributes.actionName).toEqual(MOCK_ACTION);
        });

        testStateParams(testObject.state);
    });

    describe('RecordPageReference', () => {
        const MOCK_ID = 'XXXX'
        const MOCK_OBJECT_NAME = 'MOCK_OBJECT_NAME';
        const MOCK_ACTION = 'VIEW';
        const testObject = new RecordPageReference(MOCK_ID, MOCK_OBJECT_NAME, MOCK_ACTION, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('standard__recordPage');
        });

        it('sets recordId', () => {
            expect(testObject.attributes.recordId).toEqual(MOCK_ID);
        });

        it('sets objectApiName', () => {
            expect(testObject.attributes.objectApiName).toEqual(MOCK_OBJECT_NAME);
        });

        it('sets actionName', () => {
            expect(testObject.attributes.actionName).toEqual(MOCK_ACTION);
        });

        testStateParams(testObject.state);
    });

    describe('RelationshipPageReference', () => {
        const MOCK_ID = 'XXXX'
        const MOCK_OBJECT_NAME = 'MOCK_OBJECT_NAME';
        const MOCK_RELATIONSHIP_NAME = 'MOCK_RELATIONSHIP_NAME';
        const MOCK_ACTION = 'VIEW';
        const testObject = new RelationshipPageReference(MOCK_ID, MOCK_OBJECT_NAME, MOCK_RELATIONSHIP_NAME, MOCK_ACTION, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('standard__recordRelationshipPage');
        });

        it('sets recordId', () => {
            expect(testObject.attributes.recordId).toEqual(MOCK_ID);
        });

        it('sets objectApiName', () => {
            expect(testObject.attributes.objectApiName).toEqual(MOCK_OBJECT_NAME);
        });

        it('sets relationshipApiName', () => {
            expect(testObject.attributes.relationshipApiName).toEqual(MOCK_RELATIONSHIP_NAME);
        });

        it('sets actionName', () => {
            expect(testObject.attributes.actionName).toEqual(MOCK_ACTION);
        });

        testStateParams(testObject.state);
    });

    describe('WebPageReference', () => {
        const MOCK_URL =  '/mock/url'
        const testObject = new WebPageReference(MOCK_URL, MOCK_STATE_PARAMS);

        it('sets type', () => {
            expect(testObject.type).toEqual('standard__webPage');
        });

        it('sets url', () => {
            expect(testObject.attributes.url).toEqual(MOCK_URL);
        });

        testStateParams(testObject.state);
    });
    
    /**
     * Helper function to test state params on all page reference types.
     * @param {*} state 
     */
    function testStateParams(state) {
        it('passes state params', () => {
            expect(state.c__mock1).toEqual(PARAM1);
            expect(state.c__mock2).toEqual(PARAM2);
        });
    }


});
