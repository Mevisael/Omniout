/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import { delay } from 'c/asyncUtils';

import OmniscriptCurrency from 'c/omniscriptCurrency';

describe('c-omniscript-currency', () => {
    const mockGetRecord = require('./mock.json');
    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-currency', {
            is: OmniscriptCurrency,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = { OmniScriptCurrencyCode: 'USD' };
        element.layout = 'lightning';
        element.scriptHeaderDef = {
            allCustomLabels: { OmniCurrencyRepeatAltText: 'OmniCurrencyRepeatAltText', OmniCurrencyRemoveAltText: 'OmniCurrencyRemoveAltText' },
            propSetMap: {},
        };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        element = null;
    });

    it('renders DOM elements', () => {
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('renders DOM elements in newport', () => {
        element.layout = 'newport';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('Test value of c-masked-input is change', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '(999) 999-9999';
        element._isMasked = true;
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-masked-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe(1234567890);
                resolve();
            });
            input.value = '1234567890';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('Test value of c-masked-input is change in newport', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '(999) 999-9999';
        element.layout = 'newport';
        element._isMasked = true;
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-masked-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe(1234567890);
                resolve();
            });
            input.value = '1234567890';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('Test if placeholder is set in c-masked-input', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.placeholder = '123';
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');
        expect(input.placeholder).toBe(mockJsonDef.propSetMap.placeholder);
    });

    it('Test if placeholder is set in c-masked-input in newport', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.placeholder = '123';
        element.layout = 'newport';
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');
        expect(input.placeholder).toBe(mockJsonDef.propSetMap.placeholder);
    });

    it('can repeat', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.repeat = true;
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);
        const repeatButton = element.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            element.addEventListener('omnirepeat', () => resolve());
            repeatButton.click();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should only set positive numbers or null from an api by default', async () => {
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');

        element.applyCallResp('hello', true);
        await delay(0);
        expect(input.value).toBe(null);

        element.applyCallResp(-1, true);
        await delay(0);
        expect(input.value).toBe(null);

        element.applyCallResp(5, true);
        await delay(0);
        expect(input.value).toBe(5);

        element.applyCallResp(null, true);
        await delay(0);
        expect(input.value).toBe(null);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set negative numbers from an api if allowed', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.allowNegative = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');

        element.applyCallResp(-1, true);
        await delay(0);
        expect(input.value).toBe(-1);
    });

    /**
     * To clarify, the mask-related code will parse comma (,) , period (.) and space ( )
     * as thousands/decimal separators. And the zeroes in ###.###,000 can be replaced with #
     * or any non separator character (see above) because the distance between the separator
     * and the right-most position string is used as the "scale"
     * So with the 3 zeroes, the "scale" is 3 so 3 digits after the decimal separator will be displayed
     *
     * For example : 123.45 will be displayed as 123.450 (notice that the 0 is added in as padding)
     */
    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display value with mask ###.###,000', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '###.###,000';
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        element.applyCallResp(123456.789, true);
        await delay(0);
        const innerInput = input.shadowRoot.querySelector('input');
        // the result is the USD's format has been modified by the mask
        expect(innerInput.value).toBe('USD 123.456,789');
    });
    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should only display right-most separator (duplicate comma) with mask ###,###,000', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '###,###,000';
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        element.applyCallResp(123456.789, true);
        await delay(0);
        const innerInput = input.shadowRoot.querySelector('input');
        // the result is the USD's format has been modified by the mask
        expect(innerInput.value).toBe('USD 123456,789');
    });

    /**
     * EUR is one of many hardcoded currency codes in omniscriptInternalUtils/currencySymbol.js
     * By Default, all currency assumed to have 2 decimal places, any prefill
     * containing 3 or more values will NOT be prefilled.
     * Examples of prefill that do NOT work :
     * 1.111
     * 1.2345
     * Examples of prefill that do WORK
     * 1
     * 1.2
     * 1.23
     */
    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display value of c-masked-input with EUR as currency code', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element.jsonDef = mockJsonDef;
        element.jsonData = {
            OmniScriptCurrencyCode: 'EUR',
        };

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');

        // prefill should NOT work and will NOT be stored into jsonDef.response
        element.applyCallResp(123456.789, true);
        await delay(0);
        const innerInput3 = input.shadowRoot.querySelector('input');
        expect(innerInput3.value).toBe('');

        element.applyCallResp(123456.78, true);
        await delay(0);
        const innerInput1 = input.shadowRoot.querySelector('input');
        expect(innerInput1.value).toBe('EUR 123 456,78');

        element.applyCallResp(123456.7, true);
        await delay(0);
        const innerInput2 = input.shadowRoot.querySelector('input');
        expect(innerInput2.value).toBe('EUR 123 456,70');

        // old valid value will remain when failing to prefill a non-valid value
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display padded zeroes of c-masked-input with mask ###,### 0000', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '###,### 0000';
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(123456.7, true);
        await delay(0);
        expect(innerInput.value).toBe('USD 123,456 7000');

        element.applyCallResp(123456, true);
        await delay(0);
        expect(innerInput.value).toBe('USD 123,456 0000');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should hide group separator with mask ###,### 0000', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '###,### 0000';
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        mockJsonDef.propSetMap.hideGroupSep = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(123456.7, true);
        await delay(0);
        // comma should be hidden
        expect(innerInput.value).toBe('USD 123456 7000');
    });

    /**
     * ##.###,
     * ##.###   <- there is a space at the end
     * The above two are the same because no decimal places are specified after the separator
     */
    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should change decimal separator for USD to space with mask ## ###', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '## ###';
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(1234.56, true);
        await delay(0);
        // mask doesn't match prefill value, nothing displayed
        expect(innerInput.value).toBe('USD 1,234 560');

        element.applyCallResp(654321, true);
        await delay(0);
        // USD symbol $ is default
        expect(innerInput.value).toBe('USD 654,321 000');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should have thousands separator as period and no decimal place', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '##.### ';
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(1234.56, true);
        await delay(0);
        // mask doesn't match prefill value, nothing displayed
        expect(innerInput.value).toBe('');

        element.applyCallResp(654321, true);
        await delay(0);
        // USD symbol $ is default
        expect(innerInput.value).toBe('USD 654.321');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display 3 numbers after decimal separator when mask set to 3', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = 3;
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(123456.7, true);
        await delay(0);
        expect(innerInput.value).toBe('USD 123,456.700');
    });

    /**
     * This test also includes cases in which the prefill does not match the specified mask
     */
    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display nothing when mask set to 0 and prefill has a decimal', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = 0;
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(123456.7, true);
        await delay(0);
        // prefill does not match mask, nothing gets displayed
        expect(innerInput.value).toBe('');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display when mask set to 0 and prefill has no decimal', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = 0;
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element._isMasked = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(123456, true);
        await delay(0);
        expect(innerInput.value).toBe('USD 123,456');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display integer when integer prefilled', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        element.applyCallResp(123456, true);
        await delay(0);
        // USD symbol $ is default
        expect(innerInput.value).toBe('$ 123,456.00');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should use comma and period as thousand and decimal if not specified in currency table', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.displayCurrencyCode = true;
        element.jsonDef = mockJsonDef;
        element.jsonData = {
            OmniScriptCurrencyCode: 'CAD',
        };

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');

        element.applyCallResp(123456.78, true);
        await delay(0);
        const innerInput1 = input.shadowRoot.querySelector('input');
        expect(innerInput1.value).toBe('CAD 123,456.78');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should be read only when readonly property set on input', async () => {
        document.body.appendChild(element);
        let jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        jsonDef.propSetMap.readOnly = true;
        element.jsonDef = jsonDef;
        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        const innerInput = input.shadowRoot.querySelector('input');

        await delay(0);
        expect(innerInput.readOnly).toBe(true);
    });
});
