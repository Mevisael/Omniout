/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import { delay } from 'c/asyncUtils';

import OmniscriptText from 'c/omniscriptText';

describe('c-omniscript-text', () => {
    const mockGetRecord = require('./mock.json');
    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-text', {
            is: OmniscriptText,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.layout = 'lightning';
        element.scriptHeaderDef = {
            allCustomLabels: { OmniTextRepeatAltText: 'OmniTextRepeatAltText', OmniTextRemoveAltText: 'OmniTextRemoveAltText' },
            propSetMap: {},
        };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        element = null;
    });

    it('renders DOM elements', () => {
        document.body.appendChild(element);

        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('should update data json on blur', () => {
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('Test Text');
                resolve();
            });
            input.value = 'Test Text';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('should update data json on blur when masked', () => {
        let jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        jsonDef.propSetMap.mask = '(999) 999-9999';
        element.jsonDef = jsonDef;
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-masked-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('1234567890');
                resolve();
            });
            input.value = '1234567890';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should set name to "search" when readonly to prevent Safari from autofilling', async () => {
        document.body.appendChild(element);
        let jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        jsonDef.propSetMap.readOnly = true;
        element.jsonDef = jsonDef;
        document.body.appendChild(element);

        const cinput = element.shadowRoot.querySelector('c-input');
        const input = cinput.shadowRoot.querySelector('input');

        await delay(0);
        expect(input.name).toBe('search');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should set autocomplete to "new-password" to prevent Chrome from autofilling', async () => {
        document.body.appendChild(element);
        let jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        jsonDef.propSetMap.readOnly = true;
        element.jsonDef = jsonDef;
        document.body.appendChild(element);

        const cinput = element.shadowRoot.querySelector('c-input');
        const input = cinput.shadowRoot.querySelector('input');

        await delay(0);
        expect(input.autocomplete).toBe('new-password');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should be read only when readonly property set on input', async () => {
        document.body.appendChild(element);
        let jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        jsonDef.propSetMap.readOnly = true;
        element.jsonDef = jsonDef;
        document.body.appendChild(element);

        const cinput = element.shadowRoot.querySelector('c-input');
        const input = cinput.shadowRoot.querySelector('input');

        await delay(0);
        expect(input.readOnly).toBe(true);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('is accessible', async () => {
        document.body.appendChild(element);
        await expect(element).toBeAccessible();
    });
});
