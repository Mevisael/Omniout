/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import OmniscriptFormula from 'c/omniscriptFormula';
import { createElement } from 'lwc';

describe('OmniscriptFormula', () => {
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    function makeElement(propSetMap = { expression: 'true' }) {
        const element = createElement('c-omniscript-formula', {
            is: OmniscriptFormula,
        });
        element.layout = 'lightning';
        element.scriptHeaderDef = {
            allCustomLabels: { OmniRequired: '', OmniRequiredWithLabel: '' },
            propSetMap: {},
        };
        element.jsonDef = {
            name: 'test',
            propSetMap,
        };
        element.jsonData = {
            num: 1.234,
            num2: 123456789,
            num3: 1234567890,
        };
        return element;
    }

    it('should render', () => {
        const element = makeElement();
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    describe('W-12663632', () => {
        it('mask = 9.9', done => {
            const element = makeElement({
                dataType: 'Number',
                expression: '%num%',
                mask: '9.9',
            });
            element.addEventListener('omniformatteddata', event => {
                expect(event.detail.value).toBe('1.2');
                done();
            });
            document.body.appendChild(element);
        });

        it('mask = 9.99', done => {
            const element = makeElement({
                dataType: 'Number',
                expression: '%num%',
                mask: '9.99',
            });
            element.addEventListener('omniformatteddata', event => {
                expect(event.detail.value).toBe('1.23');
                done();
            });
            document.body.appendChild(element);
        });

        it('mask = 9.999', done => {
            const element = makeElement({
                dataType: 'Number',
                expression: '%num%',
                mask: '9.999',
            });
            element.addEventListener('omniformatteddata', event => {
                expect(event.detail.value).toBe('1.234');
                done();
            });
            document.body.appendChild(element);
        });
    });
});
