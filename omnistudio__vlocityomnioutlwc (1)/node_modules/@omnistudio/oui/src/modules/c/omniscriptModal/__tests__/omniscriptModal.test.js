/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import TestContainer from './testContainer/testContainer';

describe('c-omniscript-modal', () => {
    let container = null;

    beforeEach(() => {
        container = createElement('c-test-container', {
            is: TestContainer,
        });
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('renders lightning', () => {
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');

        expect(modal.shadowRoot.querySelector('.slds-modal__container')).toBeTruthy();
    });

    it('renders newport', () => {
        container.layout = 'newport';
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');

        expect(modal.shadowRoot.querySelector('.nds-modal__container')).toBeTruthy();
    });

    it('hides header and footer', () => {
        container.hideHeader = false;
        container.hideFooter = true;
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');
        expect(modal.shadowRoot.querySelector('.slds-modal__header')).toBeTruthy();
        expect(modal.shadowRoot.querySelector('.slds-modal__footer')).toBeFalsy();
    });

    it('can close and open modal', () => {
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');
        modal.closeModal();
        expect(modal.shadowRoot.querySelector('div').style.display).toBe('none');

        modal.openModal();
        expect(modal.shadowRoot.querySelector('div').style.display).toBe('block');
    });

    it('should have success type theme', () => {
        container.type = 'success';
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');

        expect(modal.shadowRoot.querySelector('.slds-theme_success')).toBeTruthy();
    });

    it('should have error type theme', () => {
        container.type = 'error';
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');

        expect(modal.shadowRoot.querySelector('.slds-theme_error')).toBeTruthy();
    });

    it('should have info type theme', () => {
        container.type = 'info';
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');

        expect(modal.shadowRoot.querySelector('.slds-theme_info')).toBeTruthy();
    });

    it('should handle tab keydown on first and last element', () => {
        document.body.appendChild(container);
        const modal = container.shadowRoot.querySelector('c-omniscript-modal');

        const firstButton = modal.querySelector('ul li:first-child lightning-button');
        const lastButton = modal.querySelector('ul li:last-child lightning-button');

        firstButton.focus();
        const tabShiftKeyDownEvent = new KeyboardEvent('keydown', { key: 'Tab', shiftKey: true });
        firstButton.dispatchEvent(tabShiftKeyDownEvent);

        expect(container.isLastFocus).toBe(true);
        expect(container.isFirstFocus).toBe(false);

        lastButton.focus();
        const tabKeyDownEvent = new KeyboardEvent('keydown', { key: 'Tab' });
        lastButton.dispatchEvent(tabKeyDownEvent);

        expect(container.isLastFocus).toBe(false);
        expect(container.isFirstFocus).toBe(true);
    });
});
