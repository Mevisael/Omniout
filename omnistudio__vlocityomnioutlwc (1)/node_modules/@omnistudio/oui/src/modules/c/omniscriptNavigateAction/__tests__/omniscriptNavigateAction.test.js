/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';

import OmniscriptNavigateAction from 'c/omniscriptNavigateAction';

describe('c-omniscript-navigate-action', () => {
    const mockGetRecord = require('./mock.json');
    const mockDef = require('./scriptHeader.json');

    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-navigate-action', {
            is: OmniscriptNavigateAction,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = {
            timeStamp: '2021-08-09T23:51:21.435Z',
            userProfile: 'System Administrator',
            userTimeZone: '-420',
            userCurrencyCode: 'USD',
            userName: 'admin@org.com',
            userId: '005xx000001X7qfAAC',
            vlocEvents: 'omniscript_action, omniscript_response',
        };
        element.layout = 'lightning';
        element.scriptHeaderDef = mockDef;
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('should render DOM elements in lightning mode', () => {
        element.layout = 'lightning';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.shadowRoot.querySelector('.slds-is-relative.slds-p-top_xx-small')).toBeTruthy();
    });

    it('should render DOM elements in newport mode', () => {
        element.layout = 'newport';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.shadowRoot.querySelector('.nds-is-relative.nds-p-around_x-small.nds-m-bottom_x-small')).toBeTruthy();
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should successfully redirect user to proper URL when clicking navigation', async () => {
        const mock = JSON.parse(JSON.stringify(mockGetRecord));
        mock.propSetMap.variant = 'link';
        element.jsonDef = mock;

        document.body.appendChild(element);

        let temp = window.location;
        delete window.location;
        window.location = {
            href: '',
        };

        let response = await element.execute();
        expect(response.error).toBe(false);

        expect(window.location.href).toBe(element.jsonDef.propSetMap.targetUrl);

        window.location = temp;
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should emit navigate signal when clicking on Login navigation', async () => {
        expect.assertions(2);
        const mock = JSON.parse(JSON.stringify(mockGetRecord));
        mock.propSetMap.targetType = 'Login';
        mock.propSetMap.variant = 'link';
        element.jsonDef = mock;

        document.body.appendChild(element);

        let response = await element.execute();
        expect(response.error).toBe(false);

        return new Promise(resolve => {
            element.addEventListener('navigate', event => {
                expect(event.detail).toBeTruthy();
                resolve();
            });

            element.execute();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should emit navigate signal when clicking on Object navigation', async () => {
        expect.assertions(2);
        const mock = JSON.parse(JSON.stringify(mockGetRecord));
        mock.propSetMap.targetType = 'Object';
        mock.propSetMap.variant = 'link';
        element.jsonDef = mock;

        document.body.appendChild(element);

        let response = await element.execute();
        expect(response.error).toBe(false);

        return new Promise(resolve => {
            element.addEventListener('navigate', event => {
                expect(event.detail).toBeTruthy();
                resolve();
            });

            element.execute();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should emit navigate signal when clicking on Record navigation', async () => {
        expect.assertions(2);
        const mock = JSON.parse(JSON.stringify(mockGetRecord));
        mock.propSetMap.targetType = 'Record';
        mock.propSetMap.variant = 'link';
        element.jsonDef = mock;

        document.body.appendChild(element);

        let response = await element.execute();
        expect(response.error).toBe(false);

        return new Promise(resolve => {
            element.addEventListener('navigate', event => {
                expect(event.detail).toBeTruthy();
                resolve();
            });

            element.execute();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should emit restartscript signal when clicking navigation in between steps', async () => {
        expect.assertions(2);
        const mock = JSON.parse(JSON.stringify(mockGetRecord));
        mock.propSetMap.targetType = 'Restart OmniScript';
        element.jsonDef = mock;

        document.body.appendChild(element);
        let response = await element.execute();

        expect(response.error).toBe(false);

        const input = element.shadowRoot.querySelector('c-button');

        return new Promise(resolve => {
            element.addEventListener('restartscript', event => {
                expect(event).toBeTruthy();
                resolve();
            });

            input.dispatchEvent(new CustomEvent('click', {}));
        });
    });
});
