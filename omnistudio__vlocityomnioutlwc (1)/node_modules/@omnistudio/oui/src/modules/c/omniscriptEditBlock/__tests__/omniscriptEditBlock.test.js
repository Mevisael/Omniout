/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import * as EDIT_BLOCK_UTILS from 'c/omniscriptEditBlockUtils';
import { createElement } from 'lwc';
import OmniscriptEditBlock from 'c/omniscriptEditBlock';
import { delay } from 'c/asyncUtils';

// mocking this due to errors
jest.mock('c/oaVtag', () => ({
    __esModule: true,
    default: {},
}));

const enterKeyDownEvent = new KeyboardEvent('keydown', { key: 'Enter' });
const escapeKeyDownEvent = new KeyboardEvent('keydown', { key: 'Escape' });
const upKeyDownEvent = new KeyboardEvent('keydown', { key: 'Up' });
const downKeyDownEvent = new KeyboardEvent('keydown', { key: 'Down' });

// silence all print statements, COMMENT TO SHOW CONSOLE LOGS
window.console.log = jest.fn(); // this is the silence
//const jestPrint = window.console.log;

describe('c-omniscript-edit-block', () => {
    // editblock json def, with text element prefilled, also ct set to 2, which means there should be
    const jsonDef = require('./jsondef.mock.json');
    let scriptHeaderDef = {
        allCustomLabels: {},
        uuid: 'asdf',
        propSetMap: {},
    };
    let editBlock = null;
    beforeEach(() => {
        editBlock = createElement('c-omniscript-editblock', {
            is: OmniscriptEditBlock,
        });
        editBlock.key = jsonDef.name;
        editBlock.jsonDef = jsonDef;
        editBlock.dataOmniKey = jsonDef.index;
        editBlock.layout = 'lightning';
        editBlock.scriptHeaderDef = scriptHeaderDef;
    });
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('should have operation delete when ct (editblock count) is not equal to 1', () => {
        expect.assertions(1);

        // currently mock json def has ct set to 2, which means there are two edit blocks

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnirepeat', event => {
            expect(event.detail.operation).toEqual('delete');
        });

        return Promise.resolve().then(() => {
            editBlock.applyCallResp(null, true, false);
        });
    });

    it('should have operation eblastdel when ct (editblock count) is equal to 1', () => {
        expect.assertions(1);

        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        jsonDef2.ct = 1;

        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.dataOmniKey = jsonDef2.index;

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnirepeat', event => {
            expect(event.detail.operation).toEqual('eblastdel');
        });
        return Promise.resolve().then(() => {
            editBlock.applyCallResp(null, true, false);
        });
    });

    it('should have operation ebfirstadd when the editblock ct is equal to 0', () => {
        expect.assertions(1);
        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        jsonDef2.ct = 0;
        jsonDef2.children = [];

        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.layout = 'newport';
        editBlock.mode = 'Inline';
        editBlock.dataOmniKey = jsonDef2.index;

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnirepeat', event => {
            expect(event.detail.operation).toEqual('ebfirstadd');
        });
        return Promise.resolve().then(() => {
            const addDiv = editBlock.shadowRoot.querySelector('.nds-edit-block_longcards.nds-edit-block_cards-add-card.nds-grid.nds-m-bottom_medium');
            addDiv.click();
        });
    });

    it('edit block cards - nds', () => {
        editBlock.jsonData = null;
        editBlock.layout = 'newport';
        editBlock.mode = 'Cards';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);
        return Promise.resolve().then(() => {
            const iconElement = editBlock.shadowRoot.querySelector('.nds-edit-block_shortcards .nds-edit-block_shortcards-circle c-icon');
            expect(iconElement.iconName).toBe('utility:user');
        });
    });

    it('edit block inline - nds', () => {
        editBlock.jsonData = null;
        editBlock.layout = 'newport';
        editBlock.mode = 'Inline';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);
        return Promise.resolve().then(() => {
            const iconElement = editBlock.shadowRoot.querySelector('.nds-edit-block_longcards .nds-edit-block_longcards-circle c-icon');
            expect(iconElement.iconName).toBe('utility:user');
        });
    });

    it('edit block longCards - nds', () => {
        editBlock.jsonData = null;
        editBlock.layout = 'newport';
        editBlock.mode = 'LongCards';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);
        return Promise.resolve().then(() => {
            const iconElement = editBlock.shadowRoot.querySelector('.nds-edit-block_longcards .nds-edit-block_longcards-circle c-icon');
            expect(iconElement.iconName).toBe('utility:user');
        });
    });

    it('edit block fs - nds', () => {
        editBlock.jsonData = null;
        editBlock.layout = 'newport';
        editBlock.mode = 'FS';
        editBlock.jsonData = {};
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);
        expect(editBlock.shadowRoot.querySelector('.nds-grid.nds-cont-wrapper.nds-edit-block-fs-row')).toBeTruthy();
        const displayValues = editBlock.shadowRoot.querySelector(
            '.nds-grid.nds-cont-wrapper.nds-edit-block-fs-row .nds-size_12-of-12.nds-grid .nds-size_11-of-12.nds-grid > div',
        ).classList;
        expect(displayValues[2]).toBe('nds-size_12-of-12');
    });

    it('can add edit block', () => {
        expect.assertions(1);
        // ct = 1 to force showAdd button
        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        jsonDef2.ct = 1;

        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.dataOmniKey = jsonDef2.index;
        editBlock.layout = 'lightning';

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnirepeat', event => {
            expect(event.detail.operation).toEqual('update');
        });

        const addBtn = editBlock.shadowRoot.querySelector('.slds-button.slds-button_brand.slds-button_stretch');
        addBtn.click();
    });

    it('should show confirmation modal on remove click', () => {
        expect.assertions(1);
        editBlock.jsonData = null;
        editBlock.layout = 'newport';
        editBlock.mode = 'FS';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnimodal', event => {
            expect(event.detail.type).toEqual('info');
        });

        const removeDiv = editBlock.shadowRoot.querySelector(
            '.nds-edit-block_inline-action-container.nds-p-around_small.nds-grid.nds-grid_align-center',
        );
        removeDiv.click();
    });

    it('should handleKeyboard enter on remove and add icons', () => {
        expect.assertions(4);
        // ct = 1 to showAdd button
        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        jsonDef2.ct = 1;

        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.dataOmniKey = jsonDef2.index;
        editBlock.layout = 'newport';
        editBlock.mode = 'FS';

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnirepeat', event => {
            expect(event.detail.operation).toEqual('update');
        });

        editBlock.addEventListener('omnimodal', event => {
            expect(event.detail.type).toEqual('info');
        });

        const addIcon = editBlock.shadowRoot.querySelector('.nds-size_1-of-12.nds-p-horizontal_small.nds-grid.nds-grid_align-center c-icon');
        const removeIcon = editBlock.shadowRoot.querySelector(
            '.nds-edit-block_inline-action-container.nds-p-around_small.nds-grid.nds-grid_align-center c-icon',
        );

        return Promise.resolve().then(() => {
            expect(addIcon.iconName).toBe('utility:add');
            expect(removeIcon.extraclass).toBe('nds-input__icon nds-editblock_delete');

            addIcon.dispatchEvent(enterKeyDownEvent);
            removeIcon.dispatchEvent(enterKeyDownEvent);
        });
    });

    it('should be able to enter edit mode with keyboard enter key', () => {
        expect.assertions(2);
        editBlock.layout = 'newport';
        editBlock.mode = 'FS';

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnipendingupdates', event => {
            expect(event.detail.pendingUpdates).toBe(true);
        });

        const editDiv = editBlock.shadowRoot.querySelector('.nds-edit-block-fs-row .nds-size_12-of-12.nds-grid .nds-size_11-of-12.nds-grid');
        expect(editDiv).toBeTruthy();

        editDiv.dispatchEvent(enterKeyDownEvent);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should be able to save with keyboard enter key', async () => {
        // newClone value to have isEditing and isNew true
        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        jsonDef2.newClone = true;

        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.dataOmniKey = jsonDef2.index;
        editBlock.layout = 'newport';
        editBlock.mode = 'FS';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);

        const saveIcon = editBlock.shadowRoot.querySelector('.nds-size_1-of-12.nds-m-top_medium.nds-grid.nds-grid_align-center c-icon');
        await delay(0);
        expect(saveIcon.iconName).toBe('utility:check');

        saveIcon.dispatchEvent(enterKeyDownEvent);
        await delay(0);
        const editDiv = editBlock.shadowRoot.querySelector('.nds-edit-block-fs-row .nds-size_12-of-12.nds-grid .nds-size_11-of-12.nds-grid');
        let editDivFocus = editBlock.shadowRoot.activeElement === editDiv;
        expect(editDivFocus).toBeTruthy();
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should be able to cancel edit mode with keyboard enter', async () => {
        expect.assertions(2);
        // newClone value to have isEditing and isNew true
        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        jsonDef2.newClone = true;

        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.dataOmniKey = jsonDef2.index;
        editBlock.layout = 'newport';
        editBlock.mode = 'FS';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);

        document.addEventListener('omnieditblockcancel', event => {
            expect(event.bubbles).toBe(true);
        });

        const cancelIcon = editBlock.shadowRoot.querySelector(
            '.nds-size_1-of-12.nds-m-top_medium.nds-grid.nds-grid_align-center c-icon.nds-m-left_medium',
        );
        await delay(0);
        expect(cancelIcon.iconName).toBe('utility:close');

        cancelIcon.dispatchEvent(enterKeyDownEvent);
    });

    it('should be able to update checkboxes with keyboard enter', () => {
        expect.assertions(2);
        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        // set selectCheckbox to step into updateCheckbox
        jsonDef2.propSetMap.selectCheckBox = 'Text1';

        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.dataOmniKey = jsonDef2.index;
        editBlock.layout = 'newport';
        editBlock.mode = 'Cards';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);

        editBlock.addEventListener('omniaggregate', event => {
            expect(event.detail.elementId).toBe('EditBlock1');
        });

        const checkboxDiv = editBlock.shadowRoot.querySelector('.nds-m-right_medium.nds-m-bottom_medium.nds-edit-block_shortcards');
        expect(checkboxDiv.tabIndex).toBe(0);

        checkboxDiv.dispatchEvent(enterKeyDownEvent);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should be able to access action menu and navigate menu actions with keyboard', async () => {
        editBlock.layout = 'newport';
        editBlock.mode = 'Table';
        editBlock.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(editBlock);

        const menuActionBtn = editBlock.shadowRoot.querySelector('.nds-button.nds-button--icon-border-filled');
        const menuActionBtnIcon = editBlock.shadowRoot.querySelector('.nds-button.nds-button--icon-border-filled c-icon');
        await delay(0);
        expect(menuActionBtnIcon.iconName).toBe('utility:down');

        menuActionBtn.dispatchEvent(enterKeyDownEvent);
        await delay(0);
        let firstMenuItem = editBlock.shadowRoot.querySelector(`ul.nds-dropdown__list li:first-child > a`);
        let firstMenuItemFocus = editBlock.shadowRoot.activeElement === firstMenuItem;
        expect(firstMenuItemFocus).toBeTruthy();

        menuActionBtn.dispatchEvent(escapeKeyDownEvent);
        await delay(0);
        const actionMenuDiv = editBlock.shadowRoot.querySelector(
            '.nds-grid.nds-grid_vertical.nds-grid_vertical-align-end.nds-col_bump-left.nds-is-relative.nds-m-right_x-small',
        );
        expect(actionMenuDiv.childElementCount).toBe(1);

        menuActionBtn.dispatchEvent(enterKeyDownEvent);
        await delay(0);
        firstMenuItem = editBlock.shadowRoot.querySelector('ul.nds-dropdown__list li:first-child');
        firstMenuItem.dispatchEvent(upKeyDownEvent);
        let lastMenuItem = editBlock.shadowRoot.querySelector('ul.nds-dropdown__list li:last-child > a');
        let lastMenuItemFocus = editBlock.shadowRoot.activeElement === lastMenuItem;
        expect(lastMenuItemFocus).toBeTruthy();

        lastMenuItem = editBlock.shadowRoot.querySelector('ul.nds-dropdown__list li:last-child');
        lastMenuItem.dispatchEvent(downKeyDownEvent);
        firstMenuItem = editBlock.shadowRoot.querySelector('ul.nds-dropdown__list li:first-child > a');
        firstMenuItemFocus = editBlock.shadowRoot.activeElement === firstMenuItem;
        expect(firstMenuItemFocus).toBeTruthy();

        lastMenuItem.dispatchEvent(enterKeyDownEvent);
        await delay(0);
        expect(actionMenuDiv.childElementCount).toBe(1);

        menuActionBtn.dispatchEvent(enterKeyDownEvent);
        await delay(0);
        firstMenuItem = editBlock.shadowRoot.querySelector('ul.nds-dropdown__list li:first-child');
        firstMenuItem.dispatchEvent(escapeKeyDownEvent);
        await delay(0);
        expect(actionMenuDiv.childElementCount).toBe(1);
    });

    describe('handleRemove', () => {
        const DELETE_ACTION_PROPS = {
            type: 'Remote Action',
            propSetMap: {
                label: '',
            },
        };
        const spyRunAction = jest.spyOn(EDIT_BLOCK_UTILS, 'runAction').mockReturnValue(Promise.resolve({}));

        beforeEach(() => {
            let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
            jsonDef2.propSetMap.delAction = DELETE_ACTION_PROPS;
            editBlock.jsonDef = jsonDef2;
            document.body.appendChild(editBlock);
        });
        afterEach(() => {
            while (document.body.firstChild) {
                document.body.removeChild(document.body.firstChild);
            }
            jest.clearAllMocks();
        });

        // eslint-disable-next-line @lwc/lwc/no-async-await
        it('should call runAction when evt is not equal to "api"', async () => {
            const mockRemoveFunction = jest.fn();
            editBlock.addEventListener('omnieditblockremove', () => {
                mockRemoveFunction();
            });
            // simulate removal of an edit block child from user click
            editBlock.handleRemove();
            expect(spyRunAction).toHaveBeenCalledTimes(1);
            await delay(0);
            expect(mockRemoveFunction).toHaveBeenCalledTimes(1);
        });
        // eslint-disable-next-line @lwc/lwc/no-async-await
        it('should not call runAction when evt is equal to "api"', async () => {
            const mockRemoveFunction = jest.fn();
            editBlock.addEventListener('omnieditblockremove', () => {
                mockRemoveFunction();
            });
            // simulate removal of an edit block child from applyCallRespBase
            editBlock.handleRemove('api');
            expect(spyRunAction).toHaveBeenCalledTimes(0);
            await delay(0);
            expect(mockRemoveFunction).toHaveBeenCalledTimes(1);
        });
    });
});
