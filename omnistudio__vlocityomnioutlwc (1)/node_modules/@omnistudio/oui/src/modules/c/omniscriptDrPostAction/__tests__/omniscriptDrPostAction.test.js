/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptDrPostAction from 'c/omniscriptDrPostAction';
import * as Link from 'c/omniscriptRestApi';
import { delay } from 'c/asyncUtils';

describe('c-omniscript-dr-post-action', () => {
    const mockGetRecord = require('./mock.json');
    const successResponse = require('./response.json');
    const errorResponse = require('./responseError.json');

    let element = null;
    let success = null;

    beforeEach(() => {
        element = createElement('c-omniscript-dr-post-action', {
            is: OmniscriptDrPostAction,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.layout = 'lightning';
        element.scriptHeaderDef = { allCustomLabels: {}, propSetMap: {} };

        success = jest.spyOn(Link, 'GenericInvoke2NoCont');
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.restoreAllMocks();
    });

    it('should render DOM elements in lightning mode', () => {
        element.layout = 'lightning';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.shadowRoot.querySelector('.slds-is-relative.slds-p-top_xx-small')).toBeTruthy();
    });

    it('should render DOM elements in newport mode', () => {
        element.layout = 'newport';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.shadowRoot.querySelector('.nds-is-relative.nds-p-around_x-small.nds-m-bottom_x-small')).toBeTruthy();
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should emit omnimodal error after getting invalid response', async () => {
        expect.assertions(1);
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-button');
        await delay(0);

        success.mockImplementation(() => Promise.resolve(JSON.stringify(errorResponse)));

        return new Promise(resolve => {
            element.addEventListener('omnimodal', event => {
                expect(event.detail.type).toBe('error');
                resolve();
            });

            input.click();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should have an api response after executing valid and successful post action', async () => {
        expect.assertions(1);
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-button');
        await delay(0);

        success.mockImplementation(() => Promise.resolve(JSON.stringify(successResponse)));

        return new Promise(resolve => {
            element.addEventListener('omniactionbtn', event => {
                expect(event.detail.apiResponse).toBeTruthy();
                resolve();
            });

            input.click();
        });
    });
});
