/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptHttpAction from 'c/omniscriptHttpAction';
import { delay } from 'c/asyncUtils';
import * as actionHelpers from '../../omniscriptInternalUtils/actionHelpers.js';
import * as restApi from '../../omniscriptRestApi/omniscriptRestApi.js';
import * as namespaceHandler from '../../omniscriptInternalUtils/namespaceHandler.js';

describe('c-omniscript-http-action', () => {
    const webDef = require('./web.jsonDef.json');
    const apexDef = require('./apex.jsonDef.json');
    let action = null;
    let sendRequest = null;
    let GenericInvoke2NoCont = null;
    let getNamespaceDotNotation = null;

    beforeEach(() => {
        action = createElement('c-omniscript-http-action', {
            is: OmniscriptHttpAction,
        });
        action.layout = 'lightning';
        action.jsonDef = webDef;
        action.scriptHeaderDef = {
            allCustomLabels: { OmniDesInvalidJson: 'OmniDesInvalidJson' },
            propSetMap: {},
        };

        sendRequest = jest.spyOn(actionHelpers, 'sendRequest');
        GenericInvoke2NoCont = jest.spyOn(restApi, 'GenericInvoke2NoCont');
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.restoreAllMocks();
    });

    it('should render', () => {
        document.body.appendChild(action);
        expect(action.shadowRoot.children).not.toHaveLength(0);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can fetch a web url', async () => {
        sendRequest.mockImplementation(() => Promise.resolve('{ "foo": 2 }'));
        document.body.appendChild(action);
        const button = action.shadowRoot.querySelector('c-button');
        button.click();
        await delay(0);
        const obj = sendRequest.mock.calls[0][0];
        const { params, headers } = obj;

        expect(sendRequest).toHaveBeenCalled();
        expect(obj.method).toBe('GET');
        expect(obj.url).toBe('https://api.salesforce.com/');
        expect(params.foo).toBe('bar');
        expect(headers.Accept).toBe('application/json');
    });

    it('should populate data json with web response', () => {
        expect.assertions(1);
        sendRequest.mockImplementation(() => Promise.resolve('{"success":true}'));
        document.body.appendChild(action);
        const button = action.shadowRoot.querySelector('c-button');

        return new Promise(resolve => {
            action.addEventListener('omniactionbtn', event => {
                expect(event.detail.apiResponse.data.success).toBe(true);
                resolve();
            });
            button.click();
        });
    });

    it('should show a modal if an error occurred while fetching a url', () => {
        expect.assertions(1);
        sendRequest.mockImplementation(() => Promise.reject('error0'));
        document.body.appendChild(action);
        const button = action.shadowRoot.querySelector('c-button');
        return new Promise(resolve => {
            action.addEventListener('omnimodal', event => {
                expect(event.detail.message).toBe('error0');
                resolve();
            });
            button.click();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can call apex', async () => {
        getNamespaceDotNotation = jest.spyOn(namespaceHandler, 'getNamespaceDotNotation');
        getNamespaceDotNotation.mockImplementation(() => '_.');
        GenericInvoke2NoCont.mockImplementation(() => Promise.resolve('{"result":{"test": 0}}'));
        action.jsonDef = apexDef;
        document.body.appendChild(action);

        const button = action.shadowRoot.querySelector('c-button');
        button.click();
        await delay(0);

        const params = GenericInvoke2NoCont.mock.calls[0][0];
        const options = JSON.parse(params.options);

        expect(params.sClassName).toBe('_.DefaultOmniscriptApexRestService');
        expect(params.sMethodName).toBe('generateApexRestRequest');
        expect(options.restOptions.restPath).toBe('apex');
    });

    it('should populate data json with apex response', () => {
        expect.assertions(1);
        GenericInvoke2NoCont.mockImplementation(() => Promise.resolve('{"result":{"test": 1}}'));
        action.jsonDef = apexDef;
        document.body.appendChild(action);
        const button = action.shadowRoot.querySelector('c-button');

        return new Promise(resolve => {
            action.addEventListener('omniactionbtn', event => {
                expect(event.detail.apiResponse.test).toBe(1);
                resolve();
            });
            button.click();
        });
    });

    it('can parse a string result', () => {
        expect.assertions(1);
        GenericInvoke2NoCont.mockImplementation(() =>
            Promise.resolve({
                responseResult: JSON.stringify({ result: '{"test": 2}' }),
            }),
        );
        action.jsonDef = apexDef;
        document.body.appendChild(action);
        const button = action.shadowRoot.querySelector('c-button');

        return new Promise(resolve => {
            action.addEventListener('omniactionbtn', event => {
                expect(event.detail.apiResponse.test).toBe(2);
                resolve();
            });
            button.click();
        });
    });

    it('should show a modal if an error occurred while calling apex', () => {
        expect.assertions(1);
        GenericInvoke2NoCont.mockImplementation(() => Promise.reject('error1'));
        action.jsonDef = apexDef;
        document.body.appendChild(action);
        const button = action.shadowRoot.querySelector('c-button');
        return new Promise(resolve => {
            action.addEventListener('omnimodal', event => {
                expect(event.detail.message).toBe('error1');
                resolve();
            });
            button.click();
        });
    });

    it('should show a modal if invalid json returned from apex', () => {
        expect.assertions(1);
        GenericInvoke2NoCont.mockImplementation(() =>
            Promise.resolve({
                responseResult: JSON.stringify({ result: 'invalid json string' }),
            }),
        );
        action.jsonDef = apexDef;
        document.body.appendChild(action);
        const button = action.shadowRoot.querySelector('c-button');

        return new Promise(resolve => {
            action.addEventListener('omnimodal', event => {
                expect(event.detail.message).toBe('OmniDesInvalidJson');
                resolve();
            });
            button.click();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should render a spinner overlay during a pending request', async () => {
        let resolve;
        let spinner;
        const promise = new Promise(_resolve => {
            resolve = _resolve;
        });
        sendRequest.mockImplementation(() => promise);
        document.body.appendChild(action);

        const button = action.shadowRoot.querySelector('c-button');
        button.click();
        await delay(0);

        spinner = action.shadowRoot.querySelector('c-spinner');
        expect(spinner).toBeTruthy();

        resolve();
        await delay(0);

        spinner = action.shadowRoot.querySelector('c-spinner');
        expect(spinner).toBeFalsy();
    });
});
