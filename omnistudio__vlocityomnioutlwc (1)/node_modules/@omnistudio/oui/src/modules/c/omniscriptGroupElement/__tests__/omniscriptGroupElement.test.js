/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
jest.mock('c/pubsub', () => {
    return {
        register: jest.fn(),
        unregister: jest.fn(),
    };
});

import { createElement, api } from 'lwc';
import OmniscriptHeader from 'c/omniscriptHeader';
import * as REST_API from 'c/omniscriptRestApi';

const mockGetRecord = require('./mock.json');

/**
 * Mocking the generated class to pass in json def into omniscript header
 */
class testClass extends OmniscriptHeader {
    @api handleOmniAggregate(evt) {
        super.handleOmniAggregate(evt);
    }
    connectedCallback() {
        this.jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        super.connectedCallback();
    }
}
// silence all print statements, COMMENT TO SHOW CONSOLE LOGS
window.console.log = jest.fn(); // this is the silence
describe('omniaggregate - omniscriptHeader', () => {
    let element = null;
    const OMNIAGGREGATE_EVENT = 'omniaggregate';
    const AGGREGATE_EVENT = {
        detail: {
            elementId: 'MOCK_ELEMENT_ID',
            data: {
                index: 1,
            },
            aggregateNodesPath: [],
        },
        stopPropagation: jest.fn(),
    };
    const MOCK_LWC_PREP = jest.spyOn(REST_API, 'LWCPrep');
    MOCK_LWC_PREP.mockImplementation(() => Promise.resolve('{}'));

    const MOCK_LISTEN_OMNI_AGGREGATE = jest.fn().mockImplementation(() => {});

    beforeEach(() => {
        jest.clearAllMocks();
        element = createElement('c-test-class', {
            is: testClass,
        });
    });
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });
    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should not fire omniaggregate event in omniscriptHeader when RUN_MODE is not set to debug', async () => {
        // do not import the RUN_MODES because that changes it to a mock
        element.runMode = 'player';
        document.body.addEventListener(OMNIAGGREGATE_EVENT, MOCK_LISTEN_OMNI_AGGREGATE);
        document.body.appendChild(element);
        // wait 3 cycles to have all of the promises resolve properly in omniscriptheader's connected callback
        await Promise.resolve().then(() => {});
        await Promise.resolve().then(() => {});
        await Promise.resolve().then(() => {});
        element.handleOmniAggregate(AGGREGATE_EVENT);
        expect(MOCK_LISTEN_OMNI_AGGREGATE).toHaveBeenCalledTimes(0);
    });
    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should fire omniaggregate event in omniscriptHeader when RUN_MODE is set to debug', async () => {
        element.runMode = 'debug';
        document.body.addEventListener(OMNIAGGREGATE_EVENT, MOCK_LISTEN_OMNI_AGGREGATE);
        document.body.appendChild(element);
        // wait 3 cycles to have all of the promises resolve properly in omniscriptheader's connected callback
        await Promise.resolve().then(() => {});
        await Promise.resolve().then(() => {});
        await Promise.resolve().then(() => {});
        element.handleOmniAggregate(AGGREGATE_EVENT);
        // 1 time in omniscriptHeader
        // 1 time in omniscriptGroup
        expect(MOCK_LISTEN_OMNI_AGGREGATE).toHaveBeenCalledTimes(2);
    });
});
