/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptStepChart from 'c/omniscriptStepChart';

describe('c-omniscript-step-chart', () => {
    let stepChart = null;
    const jsonDef = require('./jsonDef.mock.json');
    beforeEach(() => {
        stepChart = createElement('c-omniscript-step-chart', {
            is: OmniscriptStepChart,
        });
        stepChart.jsonDef = jsonDef;
        stepChart.jsonData = null;
        stepChart.layout = 'newport';
        stepChart.props = {
            layout: 'vertical',
            position: 'right',
        };
        stepChart.scriptHeaderDef = {
            allCustomLabels: {
                InstructionKey1: 'First Instruction',
                InstructionKey2: 'Second Instruction',
                InstructionKey3: 'Third Instruction',
                OmniStepChartLabel: 'OmniStepChartLabel',
            },
            asIndex: 1,
            asName: 'Step2',
            firstStepIndex: 0,
            omniscriptKey: 'omniscriptKey',
            propSetMap: {
                stepChartPlacement: 'right',
                hideStepChart: false,
            },
            labelMap: {
                Step5: 'Step5',
                Step4: 'Step4',
                Step3: 'Step3',
                Step2: 'Step2',
                Step1: 'Step1',
            },
        };
    });
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('stepChart nds', () => {
        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const progressList = stepChart.shadowRoot.querySelector('.nds-omniscript_stepform .nds-progress__list');
            expect(progressList).toBeTruthy();
        });
    });

    it('stepChart lightning', () => {
        stepChart.layout = 'lightning';
        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const progressList = stepChart.shadowRoot.querySelector(
                '.slds-progress.slds-progress_vertical.slds-p-vertical_medium .slds-progress__list',
            );
            expect(progressList).toBeTruthy();
        });
    });

    it('should display step instruction in lightning when multi-lang is enabled', () => {
        let scriptHeaderDef2 = JSON.parse(JSON.stringify(stepChart.scriptHeaderDef));
        scriptHeaderDef2.multiLang = true;
        stepChart.scriptHeaderDef = scriptHeaderDef2;
        stepChart.layout = 'lightning';

        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const stepInstruction = stepChart.shadowRoot.querySelector('c-omniscript-formatted-rich-text');
            expect(stepInstruction.value).toBe('Second Instruction');
        });
    });

    it('should have added CSS classes on step chart items li element in lightning', () => {
        let scriptHeaderDef2 = JSON.parse(JSON.stringify(stepChart.scriptHeaderDef));
        scriptHeaderDef2.multiLang = true;
        stepChart.scriptHeaderDef = scriptHeaderDef2;
        stepChart.layout = 'lightning';

        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const chartItem = stepChart.shadowRoot.querySelector('li:first-child');
            expect(chartItem.classList.contains('omni-vert-stepchart-completed')).toBeTruthy();
        });
    });

    it('should calculate progress bar width', () => {
        let props2 = JSON.parse(JSON.stringify(stepChart.props));
        props2.layout = 'horizontal';
        props2.position = 'left';
        stepChart.props = props2;
        stepChart.layout = 'lightning';

        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const progressBarValue = stepChart.shadowRoot.querySelector('.slds-progress-bar__value');
            expect(progressBarValue.style.width).toBe('25%');
        });
    });

    it('should have accessible name for progress step list for horizontal lightning theme', () => {
        const props2 = JSON.parse(JSON.stringify(stepChart.props));
        props2.layout = 'horizontal';
        props2.position = 'left';
        stepChart.props = props2;
        stepChart.layout = 'lightning';

        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const listElement = stepChart.shadowRoot.querySelector('ol');
            expect(listElement).not.toBeNull();
            expect(listElement.getAttribute('aria-label')).toBe('OmniStepChartLabel');
        });
    });

    it('should have accessible name for progress step list for vertical lightning theme', () => {
        stepChart.layout = 'lightning';

        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const listElement = stepChart.shadowRoot.querySelector('ol');
            expect(listElement).not.toBeNull();
            expect(listElement.getAttribute('aria-label')).toBe('OmniStepChartLabel');
        });
    });

    it('should have accessible name for progress step list for newport theme', () => {
        stepChart.layout = 'newport';

        document.body.appendChild(stepChart);
        return Promise.resolve().then(() => {
            const listElement = stepChart.shadowRoot.querySelector('ol');
            expect(listElement).not.toBeNull();
            expect(listElement.getAttribute('aria-label')).toBe('OmniStepChartLabel');
        });
    });
});
