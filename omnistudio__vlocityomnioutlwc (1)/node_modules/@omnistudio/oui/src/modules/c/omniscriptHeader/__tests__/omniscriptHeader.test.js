/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
/**
 * Mocking pubsub
 */

jest.mock('c/pubsub', () => {
    return {
        register: jest.fn(),
        unregister: jest.fn(),
    };
});

import { createElement } from 'lwc';
import OmniscriptHeader from 'c/omniscriptHeader';
import * as REST_API from 'c/omniscriptRestApi';
const mockGetRecord = require('./mock.json');
const DEFAULT_USER_LANG_CODE = 'en-US';

/**
 * Mocking the generated class to pass in json def into omniscript header
 */
class testClass extends OmniscriptHeader {
    connectedCallback() {
        this.jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        super.connectedCallback();
    }
}
// silence all print statements, COMMENT TO SHOW CONSOLE LOGS
window.console.log = jest.fn(); // this is the silence
describe('omniscriptHeader', () => {
    let element = null;
    beforeEach(() => {
        jest.clearAllMocks();
        element = createElement('c-test-class', {
            is: testClass,
        });
    });
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        element = null;
    });
    it('should call lwcPrep with arguments', () => {
        const MOCK_LWC_PREP = jest.spyOn(
            REST_API,
            'LWCPrep', // this is following the package's export name, slightly different from core's
        );
        MOCK_LWC_PREP.mockImplementation(() => Promise.resolve({}));
        document.body.appendChild(element);
        expect(MOCK_LWC_PREP).toHaveBeenCalledTimes(1);
    });
    describe('Multi-Language and LanguageCode', () => {
        const ARABIC = 'ar';
        const HEBREW = 'he';
        const URDU = 'ur';
        const LEFT_TO_RIGHT = 'ltr';
        const RIGHT_TO_LEFT = 'rtl';
        it('should set dir (text direction) to ltr (Left to Right) by default', () => {
            document.body.appendChild(element);
            expect(element.dir).toEqual(LEFT_TO_RIGHT);
        });
        /**
         * There is a hard-coded list of Right-To-Left language codes supported by Salesforce
         * https://help.salesforce.com/s/articleView?id=sf.search_rtl_limitations.htm&type=5
         * Hebrew (he), Arabic (ar), Urdu (ur)
         * Language codes not in the list are treated as Left-To-Right
         */
        it('should set dir (text direction) to rtl when UserLanguageCode is set to he (hebrew)', () => {
            // mock language code
            REST_API.UserLanguageCode = HEBREW;
            document.body.appendChild(element);
            expect(element.dir).toEqual(RIGHT_TO_LEFT);
            // clear mock
            REST_API.UserLanguageCode = DEFAULT_USER_LANG_CODE;
        });
        it('should set dir (text direction) to rtl when url parameter LanguageCode is set to ar (Arabic)', () => {
            const LOCATION_SEARCH = `?c__LanguageCode=${ARABIC}`;
            // mock window.location.search
            const originalWindowLocation = window.location;
            delete window.location;
            window.location = {
                pathname: '',
                host: '',
                search: LOCATION_SEARCH,
            };
            document.body.appendChild(element);
            expect(window.location.search).toEqual(LOCATION_SEARCH);
            expect(element.dir).toEqual(RIGHT_TO_LEFT);
            // restore window location
            window.location = originalWindowLocation;
        });
        it('should set dir (text direction) to rtl when prefill is set to { LanguageCode: URDU }', () => {
            element.prefill = {
                LanguageCode: URDU,
            };
            document.body.appendChild(element);
            expect(element.dir).toEqual(RIGHT_TO_LEFT);
        });
        it('should set dir (text direction) to rtl when langCode is set inside of class', () => {
            /**
             * Package Preview class extends from OmniscriptHeader and internally sets langCode
             * when the user selects the language from the dropdown options
             */
            class mockPreview extends OmniscriptHeader {
                connectedCallback() {
                    this.jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
                    this.langCode = HEBREW;
                    super.connectedCallback();
                }
            }
            element = createElement('c-test-class', {
                is: mockPreview,
            });
            document.body.appendChild(element);
            expect(element.dir).toEqual(RIGHT_TO_LEFT);
        });
    });
});
