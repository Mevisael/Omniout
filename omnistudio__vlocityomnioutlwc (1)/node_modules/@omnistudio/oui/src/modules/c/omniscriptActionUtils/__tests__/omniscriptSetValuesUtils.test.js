/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { OmniscriptSetValuesUtil } from '../omniscriptSetValuesUtil.js';

const richText = '\x53\x6f\x6d\x65\x20\x42\x61\x64\x0a\x09\x42\x61\x64\x20\x42\x61\x64\x0a\x09\x09\x42\x41\x44\x20\x42\x41\x44\x20\x54\x65\x78\x74';

describe('omniscriptSetValuesUtils', () => {
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('handles simple replacement', () => {
        const osvu = new OmniscriptSetValuesUtil();
        const jsonData = {
            ABC: 'SomeValue',
            DEF: '" A quote and \\ slash',
        };
        const dateOutput = new Date(1984, 3, 26);
        const output = osvu.processValueMap(
            {
                Text1: '%ABC%',
                Number1: 1,
                Array1: ['ABC', 'DEF'],
                Date1: dateOutput,
                Null1: null,
                Undefined1: undefined,
                '%ABC%': '%DEF%',
            },
            {
                jsonData,
                jsonDataStr: JSON.stringify(jsonData),
                scriptHeaderDef: {
                    labelMap: {},
                },
            },
        );
        const expectedDate = new Date(dateOutput.getUTCFullYear(), dateOutput.getUTCMonth(), dateOutput.getUTCDate()).toISOString();

        expect(output.Text1).toEqual('SomeValue');
        expect(output.Number1).toEqual(1);
        expect(output.Array1).toHaveLength(2);
        expect(output.Date1).toEqual(expectedDate);
        expect(output.Null1).toBeNull();
        expect(output.Undefined1).toBeUndefined();
        expect(output.SomeValue).toEqual('" A quote and \\ slash');
    });

    it('handles replacement with tabs and new lines', () => {
        const osvu = new OmniscriptSetValuesUtil();
        const jsonData = {
            ABC: richText,
        };
        const output = osvu.processValueMap(
            {
                Text1: '%ABC%',
                Formula1: '=STRING(%ABC%)',
            },
            {
                jsonData,
                jsonDataStr: JSON.stringify(jsonData),
                scriptHeaderDef: {
                    labelMap: {},
                },
            },
        );

        expect(output.Text1).toEqual(`Some Bad\n\tBad Bad\n\t\tBAD BAD Text`);
        expect(output.Formula1).toEqual(richText);
    });

    it('handles replacement with function', () => {
        const osvu = new OmniscriptSetValuesUtil();
        const jsonData = {
            ABC: 'true',
            Array: ['%ABC%', 'TEST'],
        };
        const output = osvu.processValueMap(
            {
                Text1: '=BOOLEAN(%ABC%)',
                Date1: '=AGEON(new Date(1984, 3, 26), new Date(2015, 8, 17))',
                Number1: '=10+2',
                Array1: '=ARRAY(%Array%)',
            },
            {
                jsonData,
                jsonDataStr: JSON.stringify(jsonData),
                scriptHeaderDef: {
                    labelMap: {},
                },
            },
        );

        expect(output.Text1).toEqual(true);
        expect(output.Date1).toEqual(31);
        expect(output.Number1).toEqual(12);
        expect(output.Array1).toHaveLength(2);
        expect(output.Array1[0]).toEqual('true');
        expect(output.Array1[1]).toEqual('TEST');
    });

    it('handles replacement with different quotes', () => {
        const osvu = new OmniscriptSetValuesUtil();
        const jsonData = {
            ABC: 'ABC',
        };
        const output = osvu.processValueMap(
            {
                Text1: '%ABC%',
                Formula1: '=CONCATENATE("%ABC%", "DEF")',
                Formula2: "=CONCATENATE('%ABC%', 'DEF')",
            },
            {
                jsonData,
                jsonDataStr: JSON.stringify(jsonData),
                scriptHeaderDef: {
                    labelMap: {},
                },
            },
        );

        expect(output.Text1).toEqual(`ABC`);
        expect(output.Formula1).toEqual(`ABCDEF`);
        expect(output.Formula2).toEqual(`ABCDEF`);
    });

    it('handles replacement with Objects and arrays', () => {
        const osvu = new OmniscriptSetValuesUtil();
        const jsonData = {
            ABC: 'true',
            Array: ['%ABC%', 'TEST'],
            DEF: '%HIJ%',
            HIJ: 'HIJ',
            boolean1: true,
            date1: new Date(1984, 3, 26),
            object: {
                abc: true,
                array: [
                    {
                        key: '%Array%',
                    },
                    {
                        key: 'value2',
                    },
                ],
            },
        };
        const output = osvu.processValueMap(
            {
                object: {
                    Text1: '=BOOLEAN(%ABC%)',
                    Date1: '=AGEON(new Date(1984, 3, 26), new Date(2015, 8, 17))',
                    Date2: '%date1%',
                    Bool2: '%boolean1%',
                    Number1: '=10+2',
                    Array1: '=ARRAY(%Array%)',
                    Array11: '=IF(true, ARRAY(%Array%), ARRAY(%Array%))',
                    Array12: '=IF(false, ARRAY(%Array%), ARRAY(%Array%))',
                    Array2: '%Array%',
                    Array3: '%object:array|1:key%',
                    child: {
                        '%ABC%': '=STRING(%ABC%)',
                    },
                },
                object2: '%object%',
                array: [
                    {
                        Text1: '=BOOLEAN(%ABC%)',
                    },
                    {
                        Text1: '=BOOLEAN(%ABC%)',
                    },
                ],
                Array2: '%Array%',
                '%ABC%': '%ABC%',
                '=STRING(%DEF%)': "=CONCATENATE('%', 'ABC', '%')",
                weirdtest: '%Array%',
            },
            {
                jsonData,
                jsonDataStr: JSON.stringify(jsonData),
                scriptHeaderDef: {
                    labelMap: {},
                },
            },
        );
        expect(output.object.Text1).toEqual(true);
        expect(output.object.Bool2).toEqual(true);
        expect(output.object.Date2.split('T')[0]).toEqual('1984-04-26');
        expect(output.object.Date1).toEqual(31);
        expect(output.object.Number1).toEqual(12);
        expect(output.object.child.true).toEqual('true');
        expect(output.object.Array1).toHaveLength(2);
        expect(output.object.Array1[0]).toEqual('true');
        expect(output.object.Array1[1]).toEqual('TEST');
        expect(output.object.Array11).toHaveLength(2);
        expect(output.object.Array11[0]).toEqual('true');
        expect(output.object.Array11[1]).toEqual('TEST');
        expect(output.object.Array12).toHaveLength(2);
        expect(output.object.Array12[0]).toEqual('true');
        expect(output.object.Array12[1]).toEqual('TEST');
        expect(output.object.Array2).toHaveLength(2);
        expect(output.object.Array2[0]).toEqual('true');
        expect(output.object.Array2[1]).toEqual('TEST');
        expect(output.object.Array3).toHaveLength(2);
        expect(output.object.Array3[0]).toEqual('true');
        expect(output.object.Array3[1]).toEqual('TEST');

        expect(output.object2.abc).toEqual(true);
        expect(output.object2.array).toHaveLength(2);
        expect(output.object2.array[0].key).toHaveLength(2);
        expect(output.object2.array[0].key[0]).toEqual('true');
        expect(output.object2.array[1].key).toEqual('value2');

        expect(output.Array2).toHaveLength(2);
        expect(output.Array2[0]).toEqual('true');
        expect(output.Array2[1]).toEqual('TEST');

        expect(output.array[0].Text1).toEqual(true);
        expect(output.array[1].Text1).toEqual(true);

        expect(output.true).toEqual('true');
        expect(output.HIJ).toEqual('true');
    });

    it('handles W-11977098', () => {
        const osvu = new OmniscriptSetValuesUtil();
        const jsonData = {
            baseLink: '/base/link/path.html',
            '/': '%2F',
        };

        const output = osvu.processValueMap(
            {
                concatLink: '%baseLink%?url=%/%path%/%to%/%goal',
            },
            {
                jsonData,
                jsonDataStr: JSON.stringify(jsonData),
                scriptHeaderDef: {
                    labelMap: {},
                },
            },
        );

        expect(output.concatLink).toEqual('/base/link/path.html?url=%2Fpath%2Fto%2Fgoal');
    });

    it("Test if value doesn't exist in jsonData", () => {
        const osvu = new OmniscriptSetValuesUtil();
        const jsonData = {
            Preseleccion: {
                viewPlanMainLWC: {},
            },
        };
        const output = osvu.processValueMap(
            {
                ViewPlan: {
                    Portin: {
                        OrderId: '%Preseleccion:viewPlanMainLWC:PortinOrderId%',
                    },
                },
            },
            {
                jsonData,
                jsonDataStr: JSON.stringify(jsonData),
                scriptHeaderDef: {
                    labelMap: {},
                },
            },
        );
        expect(output.ViewPlan.Portin.OrderId).toEqual('');
    });
});
