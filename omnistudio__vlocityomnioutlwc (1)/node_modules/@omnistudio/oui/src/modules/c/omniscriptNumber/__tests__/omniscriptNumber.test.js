/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import { delay } from 'c/asyncUtils';

import OmniscriptNumber from 'c/omniscriptNumber';

describe('c-omniscript-number', () => {
    const mockGetRecord = require('./mock.json');
    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-number', {
            is: OmniscriptNumber,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.layout = 'lightning';
        element.scriptHeaderDef = { allCustomLabels: {}, propSetMap: {} };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('renders DOM elements', () => {
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('Test value is change c-masked-input', () => {
        element.type = 'number';
        document.body.appendChild(element);
        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-masked-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe(123.23);
                resolve();
            });
            input.value = 123.23;
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should set autocomplete to "new-password" to prevent Chrome from autofilling', async () => {
        document.body.appendChild(element);
        let jsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        jsonDef.propSetMap.readOnly = true;
        element.jsonDef = jsonDef;
        document.body.appendChild(element);

        const cinput = element.shadowRoot.querySelector('c-masked-input');
        const input = cinput.shadowRoot.querySelector('input');

        await delay(0);
        expect(input.autocomplete).toBe('new-password');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display value with mask ###.###,000', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '###.###,000';
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        element.applyCallResp(123456.789, true);
        await delay(0);
        const innerInput = input.shadowRoot.querySelector('input');
        // the result is the USD's format has been modified by the mask
        expect(innerInput.value).toBe('123.456,789');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display with no thousands separator by default', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        // mask is null by default
        mockJsonDef.propSetMap.mask = null;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        element.applyCallResp(123456789, true);
        await delay(0);
        const innerInput = input.shadowRoot.querySelector('input');
        expect(innerInput.value).toBe('123456789');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display integer by default when prefilled with integer', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = null;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        element.applyCallResp(1234567, true);
        await delay(0);
        const innerInput = input.shadowRoot.querySelector('input');
        expect(innerInput.value).toBe('1234567');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display with decimal by default', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = null;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        element.applyCallResp(1234567.89, true);
        await delay(0);
        const innerInput = input.shadowRoot.querySelector('input');
        expect(innerInput.value).toBe('1234567.89');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display nothing when prefill has a decimal and mask is not parseable', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '0'; // mask matches nothing, use default mask settings
        mockJsonDef.response = null; // this will be used when applyCallResp fails to set value
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');
        element.applyCallResp(76543.21, true);
        await delay(0);
        const innerInput = input.shadowRoot.querySelector('input');
        expect(innerInput.value).toBe('');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should display only numbers with no decimal when mask is not parseable ', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '###'; // mask matches nothing, use default mask settings
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);

        const input = element.shadowRoot.querySelector('c-masked-input');

        element.addEventListener('omniaggregate', event => {
            expect(event.detail.data).toBe(12345);
        });
        await delay(0);
        input.value = 123.45; // ignores the decimal, simulates "user input"
        input.dispatchEvent(new CustomEvent('blur', {}));
    });
});
