/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import VlocityCombobox from "c/combobox";
import { delay } from "c/asyncUtils";
import optionsSelected from "@salesforce/label/c.optionsSelected";

const DEBOUNCE = 100;

describe("c-combobox", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Check if theme is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.theme = "nds";
    element.placeholder = "Normal Input";
    element.readonly = true;
    element.value = "Apple";
    document.body.appendChild(element);
    const button = element.shadowRoot.querySelector("div");
    let index = button.className.indexOf("nds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /* Check if the label  is set */
  it("Check If label is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.theme = "slds";
    element.value = "Apple";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    const label = element.shadowRoot.querySelector("label");
    expect(label.textContent).toBe("Single Select");
  });

  /* Check if the value  is set */
  it("Check If value is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.theme = "slds";
    element.value = "Apple";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.value).toBe("Apple");
  });

  /* Check if the placeholder  is set */
  it("Check If placeholder is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.theme = "slds";
    element.value = "Apple";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    const input = element.shadowRoot
      .querySelector("input")
      .getAttribute("placeholder");
    expect(input).toBe("Normal Input");
  });

  /* Check if the variant  is set */
  it("Check If variant is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.theme = "slds";
    element.value = "Apple";
    element.placeholder = "Normal Input";
    element.variant = "label-hidden";
    document.body.appendChild(element);
    const label = element.shadowRoot.querySelector("label");
    expect(label).toBe(null);
  });

  /* Check if the multiple is set */
  it("Check If multiple value is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Multi Select";
    element.multiple = true;
    element.theme = "slds";
    element.value = "Apple,Orange";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.value).toBe(`2 ${optionsSelected}`);
  });

  /* Check if the maxCount is set */
  it("Check If maxCount value is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.maxCount = 2;
    element.theme = "slds";
    element.value = "Apple";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    let height = parseInt(2, 10) * 35 + "px";
    const list = element.shadowRoot.querySelector("ul");
    expect(list.style.maxHeight).toBe(height);
  });

  /* Check if readOnly disabled */
  it("Check If readOnly disabled", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.searchable = true;
    element.theme = "slds";
    element.value = "Apple";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    expect(element.readOnly).toBe(false);
  });

  /* Check if fieldLevelHelp is set */
  it("Check If fieldLevelHelp is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.fieldLevelHelp = "Test Message";
    element.theme = "slds";
    element.value = "Apple";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    const toolTip = element.shadowRoot.querySelector("c-tooltip");
    expect(toolTip.content).toBe("Test Message");
  });

  /* Check if the required attribute is set */
  it("Check If required attribute is set", () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    expect(element.checkValidity()).toBe(false);
  });

  it("can highlight an option by its first letter", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "o" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Orange"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const orangeOption = element.shadowRoot.querySelector(
      'li div[data-value="Orange"]'
    );
    orangeOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "o" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Orange"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("can check an option by its first letter", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "o" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Orange"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const orangeOption = element.shadowRoot.querySelector(
      'li div[data-value="Orange"]'
    );
    orangeOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "o" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Orange"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("should highlight the first matching option after what is currently highlighted", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Mandarin",
        value: "Mandarin"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.value = "Orange";
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "m" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Mango"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const orangeOption = element.shadowRoot.querySelector(
      'li div[data-value="Orange"]'
    );
    orangeOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "o" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Orange"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("should highlight the first matching option after what is currently highlighted (wraparound)", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.value = "Mango";
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Apple"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const orangeOption = element.shadowRoot.querySelector(
      'li div[data-value="Orange"]'
    );
    orangeOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "o" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Orange"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("should clear previous input post onblur when options/value is null", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "abc",
        value: "abc"
      }
    ];
    element.value = "abc";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");

    expect(element.value).toBe("abc");
    expect(input.getAttribute("data-value")).toBe("abc");

    element.options = [];

    input.dispatchEvent(new KeyboardEvent("blur"));
    await delay(0);

    expect(element.value).toHaveLength(0);
    expect(input.getAttribute("data-value")).toBe("");
  });

  it("should highlight the first option that matches a query", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "a",
        value: "a"
      },
      {
        label: "ab",
        value: "ab"
      },
      {
        label: "abc",
        value: "abc"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "b" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="ab"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const abcOption = element.shadowRoot.querySelector(
      'li div[data-value="abc"]'
    );
    abcOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="abc"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("can query an option by number", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "a",
        value: "a"
      },
      {
        label: "a1",
        value: "a1"
      },
      {
        label: "a2",
        value: "a2"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(DEBOUNCE);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "2" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="a2"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const aOption = element.shadowRoot.querySelector('li div[data-value="a2"]');
    aOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="a2"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("can query an option by capitalized letters", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "1",
        value: "1"
      },
      {
        label: "a",
        value: "a"
      },
      {
        label: "A",
        value: "A"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "A" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="a"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const aOption = element.shadowRoot.querySelector('li div[data-value="A"]');
    aOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "A" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="A"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("can query a capitalized option by lowercase letter", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "1",
        value: "1"
      },
      {
        label: "A",
        value: "A"
      },
      {
        label: "a",
        value: "a"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="A"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const aOption = element.shadowRoot.querySelector('li div[data-value="a"]');
    aOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="a"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("should allow the user to query a new option after 700ms", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "xyz",
        value: "xyz"
      },
      {
        label: "a",
        value: "a"
      },
      {
        label: "123",
        value: "123"
      },
      {
        label: "ab",
        value: "ab"
      },
      {
        label: "abc",
        value: "abc"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="a"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    await delay(700);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "b" }));
    await delay(DEBOUNCE);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "c" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="abc"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const abcOption = element.shadowRoot.querySelector(
      'li div[data-value="abc"]'
    );
    abcOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="abc"]')
        .getAttribute("aria-checked")
    ).toBe("true");
  });

  it("should not highlight a new option if a query does not match", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "a",
        value: "a"
      },
      {
        label: "ab",
        value: "ab"
      },
      {
        label: "abc",
        value: "abc"
      }
    ];
    element.value = "a";
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "x" }));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "y" }));
    await delay(DEBOUNCE);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "z" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="a"]')
        .getAttribute("aria-checked")
    ).toBe("false");
  });

  it("should allow a user to delete chars in a query", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "a",
        value: "a"
      },
      {
        label: "ab",
        value: "ab"
      },
      {
        label: "abc",
        value: "abc"
      }
    ];
    element.value = "a";
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "b" }));
    await delay(DEBOUNCE);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "Backspace" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="ab"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "b" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="ab"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "c" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="abc"]')
        .getAttribute("aria-checked")
    ).toBe("false");
  });

  it("should allow a user to completely delete a query", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "a",
        value: "a"
      },
      {
        label: "xyz",
        value: "xyz"
      },
      {
        label: "abc",
        value: "abc"
      }
    ];
    element.value = "a";
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    await delay(0);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "b" }));
    await delay(DEBOUNCE);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "c" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="abc"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "Backspace" }));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "Backspace" }));
    await delay(DEBOUNCE);

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "Backspace" }));
    await delay(DEBOUNCE);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="abc"]')
        .getAttribute("aria-checked")
    ).toBe("false");

    input.dispatchEvent(new KeyboardEvent("keyup", { key: "a" }));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="a"]')
        .getAttribute("aria-checked")
    ).toBe("false");
  });

  it("should announce an option as checked is checked from the option, and all other options as not checked", async () => {
    const element = createElement("c-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "Apple",
        value: "Apple"
      },
      {
        label: "Orange",
        value: "Orange"
      },
      {
        label: "Mango",
        value: "Mango"
      }
    ];
    element.label = "Single Select";
    element.required = true;
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);

    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    const mangoOption = element.shadowRoot.querySelector(
      'li div[data-value="Mango"]'
    );
    mangoOption.dispatchEvent(new CustomEvent("mouseup"));

    input.dispatchEvent(new CustomEvent("click"));
    await delay(0);

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Mango"]')
        .getAttribute("aria-checked")
    ).toBe("true");

    expect(
      element.shadowRoot
        .querySelector('li div[data-value="Apple"]')
        .getAttribute("aria-checked")
    ).toBe("false");
  });

  /**
   * W-13668028 - check previous selected value after combobox is closed by clicking nds dropdown
   */
  it("The previouse selected value should be maintained after combobox is closed by nds dropdown", async () => {
    const element = createElement("runtime_omnistudio_common-combobox", {
      is: VlocityCombobox
    });
    element.options = [
      {
        label: "AA",
        value: "AA"
      },
      {
        label: "BB",
        value: "BB"
      }
    ];
    element.label = "Single Select";
    element.theme = "nds";
    element.placeholder = "Normal Input";
    element.readonly = true;
    element.value = "AA";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    const dropdown = element.shadowRoot.querySelector("c-icon");

    dropdown.dispatchEvent(new CustomEvent("mouseup"));
    await delay(0);

    dropdown.dispatchEvent(new CustomEvent("mouseup"));
    await delay(0);

    input.dispatchEvent(new KeyboardEvent("blur"));
    await delay(0);

    expect(input.value).toBe("AA");
  });
});
