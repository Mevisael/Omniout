/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import datatable from "c/dataTable";
import * as dataset from "./dataset";

jest.mock(
  "@salesforce/label/c.selectAllAriaLabel",
  () => {
    return { default: "Select All" };
  },
  { virtual: true }
);

jest.mock(
  "@salesforce/label/c.selectRowAriaLabel",
  () => {
    return { default: "Select Row {0}" };
  },
  { virtual: true }
);

describe("c-data-table", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.columns = [];
    element.records = [];
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  it("Check searchable data table", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.rowLevelEdit = "true";
    element.pagesize = "1";
    element.issortavailable = "true";
    element.theme = "slds";
    document.body.appendChild(element);
    element.columns = [
      {
        fieldName: "company",
        label: "Company",
        sortable: true,
        searchable: true
      },
      {
        fieldName: "email",
        label: "Email",
        sortable: true,
        searchable: true,
        type: "email",
        editable: true,
        userSelectable: true
      },
      {
        fieldName: "age",
        label: "Age",
        sortable: true,
        type: "number",
        editable: true,
        userSelectable: true
      }
    ];
    element.records = [
      {
        id: "5b5949d7e9a3b7f6e3d0ffcb",
        isActive: true,
        balance: "$3,390.43",
        picture: "http://placehold.it/32x32",
        age: 28,
        eyeColor: "brown",
        company: "EXOSPACE",
        email: "madgedickerson@exospace.com",
        phone: "+1 (977) 568-2404",
        address: "280 Senator Street, Reno, Texas, 1385",
        registered: "<ReferenceError: moment is not defined>",
        latitude: -46.592853,
        longitude: -2.752586
      },
      {
        id: "5b5949d7181ece56a0e006b3",
        isActive: false,
        balance: "$2,715.89",
        picture: "http://placehold.it/32x32",
        age: 35,
        eyeColor: "blue",
        company: "LOTRON",
        email: "madgedickerson@kidgrease.com",
        phone: "+1 (844) 480-3827",
        address: "326 Centre Street, Bascom, Hawaii, 1379",
        registered: "<ReferenceError: moment is not defined>",
        latitude: 89.496124,
        longitude: 74.9523
      },
      {
        id: "5b5949d78e93fe6ba6c4ded4",
        isActive: false,
        balance: "$1,410.73",
        picture: "http://placehold.it/32x32",
        age: 32,
        eyeColor: "brown",
        company: "LOTRON",
        email: "madgedickerson@xyqag.com",
        phone: "+1 (974) 455-3584",
        address: "225 Scholes Street, National, West Virginia, 7049",
        registered: "<ReferenceError: moment is not defined>",
        latitude: -64.981052,
        longitude: 31.889248
      }
    ];
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      element.searchListBy("EX", ["company"]);
      const data = element.shadowRoot.querySelectorAll(
        ".slds-data-table-body .tableRow"
      );
      expect(data).toHaveLength(1);
      done();
    });
  });

  it("Check grouped data table is rendered", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.issearchavailable = "true";
    element.issortavailable = "true";
    element.groupBy = "company";
    element.theme = "slds";
    element.columns = [
      {
        fieldName: "company",
        label: "Company",
        sortable: true,
        searchable: true
      },
      {
        fieldName: "email",
        label: "Email",
        sortable: true,
        searchable: true,
        type: "email",
        editable: true,
        userSelectable: true
      },
      {
        fieldName: "age",
        label: "Age",
        sortable: true,
        type: "number",
        editable: true,
        userSelectable: true
      }
    ];
    element.records = [
      {
        index: 0,
        isActive: false,
        balance: 1256,
        age: 24,
        eyeColor: "green",
        name: "Harriet Noble",
        gender: "female",
        company: "UPDAT",
        email: "harrietnoble@updat.com",
        phone: "+1 (966) 451-2309"
      },
      {
        index: 1,
        isActive: false,
        balance: 2317.43,
        age: 26,
        eyeColor: "brown",
        name: "Delia Bonner",
        gender: "female",
        company: "SOLAREN",
        email: "deliabonner@solaren.com",
        phone: "+1 (970) 554-3357"
      },
      {
        index: 2,
        isActive: false,
        balance: 1373.74,
        age: 39,
        eyeColor: "brown",
        name: "Key Mooney",
        gender: "male",
        company: "VELOS",
        email: "keymooney@velos.com",
        phone: "+1 (948) 417-3771"
      },
      {
        index: 3,
        isActive: true,
        balance: 1623.21,
        age: 25,
        eyeColor: "green",
        name: "Perez Gibbs",
        gender: "male",
        company: "GEOLOGIX",
        email: "perezgibbs@geologix.com",
        phone: "+1 (972) 599-2440"
      },
      {
        index: 4,
        isActive: true,
        balance: 2358.19,
        age: 22,
        eyeColor: "blue",
        name: "Randolph Goodwin",
        gender: "male",
        company: "SNIPS",
        email: "randolphgoodwin@snips.com",
        phone: "+1 (973) 473-2613"
      }
    ];
    element.issearchavailable = "true";
    element.issortavailable = "true";
    element.groupBy = {
      groupFieldName: "company",
      fields: [
        {
          name: "age",
          methodToCalculateSummary: ""
        }
      ],
      groupDescription: ""
    };

    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    window.setTimeout(function() {
      const ele = element.shadowRoot.querySelectorAll('[data-group="row"]');
      expect(ele).toHaveLength(element.records.length);
      done();
    });
  });

  it("Check if dragable dataTable is rendered", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.theme = "slds";
    element.issortavailable = "true";
    element.columns = [
      {
        fieldName: "index",
        label: "index",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "isActive",
        label: "isActive",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "balance",
        label: "balance",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "age",
        label: "age",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "eyeColor",
        label: "eyeColor",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "name",
        label: "name",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "gender",
        label: "gender",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "company",
        label: "company",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "email",
        label: "email",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "phone",
        label: "phone",
        searchable: false,
        sortable: true,
        type: "text"
      }
    ];
    element.records = [
      {
        index: 0,
        isActive: false,
        balance: 1256,
        age: 24,
        eyeColor: "green",
        name: "Harriet Noble",
        gender: "female",
        company: "UPDAT",
        email: "harrietnoble@updat.com",
        phone: "+1 (966) 451-2309"
      },
      {
        index: 1,
        isActive: false,
        balance: 2317.43,
        age: 26,
        eyeColor: "brown",
        name: "Delia Bonner",
        gender: "female",
        company: "SOLAREN",
        email: "deliabonner@solaren.com",
        phone: "+1 (970) 554-3357"
      },
      {
        index: 2,
        isActive: false,
        balance: 1373.74,
        age: 39,
        eyeColor: "brown",
        name: "Key Mooney",
        gender: "male",
        company: "VELOS",
        email: "keymooney@velos.com",
        phone: "+1 (948) 417-3771"
      },
      {
        index: 3,
        isActive: true,
        balance: 1623.21,
        age: 25,
        eyeColor: "green",
        name: "Perez Gibbs",
        gender: "male",
        company: "GEOLOGIX",
        email: "perezgibbs@geologix.com",
        phone: "+1 (972) 599-2440"
      },
      {
        index: 4,
        isActive: true,
        balance: 2358.19,
        age: 22,
        eyeColor: "blue",
        name: "Randolph Goodwin",
        gender: "male",
        company: "SNIPS",
        email: "randolphgoodwin@snips.com",
        phone: "+1 (973) 473-2613"
      }
    ];
    element.draggable = "true";

    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      const ele = element.shadowRoot.querySelectorAll(
        ".tableRow .slds-draggable-icon"
      );
      const len = ele && ele.length;
      expect(len).toBe(element.records.length);
      done();
    }, 200);
  });

  it("Check if dragging is disabled for sorted dataTable", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.theme = "slds";
    element.issortavailable = "true";
    element.columns = [
      {
        fieldName: "index",
        label: "index",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "isActive",
        label: "isActive",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "balance",
        label: "balance",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "age",
        label: "age",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "eyeColor",
        label: "eyeColor",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "name",
        label: "name",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "gender",
        label: "gender",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "company",
        label: "company",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "email",
        label: "email",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "phone",
        label: "phone",
        searchable: false,
        sortable: true,
        type: "text"
      }
    ];
    element.records = [
      {
        index: 0,
        isActive: false,
        balance: 1256,
        age: 24,
        eyeColor: "green",
        name: "Harriet Noble",
        gender: "female",
        company: "UPDAT",
        email: "harrietnoble@updat.com",
        phone: "+1 (966) 451-2309"
      },
      {
        index: 1,
        isActive: false,
        balance: 2317.43,
        age: 26,
        eyeColor: "brown",
        name: "Delia Bonner",
        gender: "female",
        company: "SOLAREN",
        email: "deliabonner@solaren.com",
        phone: "+1 (970) 554-3357"
      },
      {
        index: 2,
        isActive: false,
        balance: 1373.74,
        age: 39,
        eyeColor: "brown",
        name: "Key Mooney",
        gender: "male",
        company: "VELOS",
        email: "keymooney@velos.com",
        phone: "+1 (948) 417-3771"
      },
      {
        index: 3,
        isActive: true,
        balance: 1623.21,
        age: 25,
        eyeColor: "green",
        name: "Perez Gibbs",
        gender: "male",
        company: "GEOLOGIX",
        email: "perezgibbs@geologix.com",
        phone: "+1 (972) 599-2440"
      },
      {
        index: 4,
        isActive: true,
        balance: 2358.19,
        age: 22,
        eyeColor: "blue",
        name: "Randolph Goodwin",
        gender: "male",
        company: "SNIPS",
        email: "randolphgoodwin@snips.com",
        phone: "+1 (973) 473-2613"
      }
    ];
    element.draggable = "true";

    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      const ele = element.shadowRoot.querySelectorAll(
        ".slds-data-table-head .slds-data-table-row"
      );
      const colHeader =
        ele.length && ele[0].querySelectorAll('[role="columnheader"]');
      expect(colHeader.length).toBe(element.columns.length + 1);
      const anchor = colHeader[3].querySelector("a");
      /**
       * On click the column will be sorted and the dragging will be disabled.
       */
      anchor.dispatchEvent(new CustomEvent("click"));
      // eslint-disable-next-line @lwc/lwc/no-async-operation
      setTimeout(() => {
        const dragEle = element.shadowRoot.querySelectorAll(
          ".slds-data-table-body .tableRow .slds-draggable-icon"
        );
        expect(dragEle.length).toBe(0);
        done();
      });
    });
  });

  it("Check row delete dependent column for dataTable", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.theme = "slds";
    element.issortavailable = "true";
    element.rowDelete = "true";
    element.rowDeleteDependentColumn = "isActive";
    element.columns = [
      {
        fieldName: "index",
        label: "index",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        editable: "true",
        fieldName: "isActive",
        label: "isActive",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "balance",
        label: "balance",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "age",
        label: "age",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "eyeColor",
        label: "eyeColor",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "name",
        label: "name",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "gender",
        label: "gender",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "company",
        label: "company",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "email",
        label: "email",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "phone",
        label: "phone",
        searchable: false,
        sortable: true,
        type: "text"
      }
    ];
    element.records = [
      {
        index: 0,
        isActive: false,
        balance: 1256,
        age: 24,
        eyeColor: "green",
        name: "Harriet Noble",
        gender: "female",
        company: "UPDAT",
        email: "harrietnoble@updat.com",
        phone: "+1 (966) 451-2309"
      },
      {
        index: 1,
        isActive: false,
        balance: 2317.43,
        age: 26,
        eyeColor: "brown",
        name: "Delia Bonner",
        gender: "female",
        company: "SOLAREN",
        email: "deliabonner@solaren.com",
        phone: "+1 (970) 554-3357"
      },
      {
        index: 2,
        isActive: false,
        balance: 1373.74,
        age: 39,
        eyeColor: "brown",
        name: "Key Mooney",
        gender: "male",
        company: "VELOS",
        email: "keymooney@velos.com",
        phone: "+1 (948) 417-3771"
      },
      {
        index: 3,
        isActive: true,
        balance: 1623.21,
        age: 25,
        eyeColor: "green",
        name: "Perez Gibbs",
        gender: "male",
        company: "GEOLOGIX",
        email: "perezgibbs@geologix.com",
        phone: "+1 (972) 599-2440"
      },
      {
        index: 4,
        isActive: true,
        balance: 2358.19,
        age: 22,
        eyeColor: "blue",
        name: "Randolph Goodwin",
        gender: "male",
        company: "SNIPS",
        email: "randolphgoodwin@snips.com",
        phone: "+1 (973) 473-2613"
      }
    ];
    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      const rows = element.shadowRoot.querySelectorAll(
        'c-data-table-cell[data-field-name="isActive"]'
      );
      let ind;
      [...rows].some((cell, index) => {
        const value = cell.shadowRoot
          .querySelector("c-output-field")
          // eslint-disable-next-line @lwc/lwc/no-inner-html
          .shadowRoot.querySelector("span").innerHTML;
        if (value === "true") {
          ind = index;
          return true;
        }
        return false;
      });
      const deleteButtons = element.shadowRoot.querySelectorAll(
        "c-button[data-disable]"
      );
      deleteButtons.forEach((btn, index) => {
        if (index === ind) {
          expect(btn.dataset.disable).toBe("true");
        }
      });
      done();
    });
  });

  it("Check keyoard navigation of cells", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.theme = "slds";
    element.issortavailable = "true";
    element.columns = [
      {
        fieldName: "index",
        label: "index",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        editable: "true",
        fieldName: "isActive",
        label: "isActive",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "balance",
        label: "balance",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "age",
        label: "age",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "eyeColor",
        label: "eyeColor",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "name",
        label: "name",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "gender",
        label: "gender",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "company",
        label: "company",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "email",
        label: "email",
        searchable: false,
        sortable: true,
        type: "text"
      },
      {
        fieldName: "phone",
        label: "phone",
        searchable: false,
        sortable: true,
        type: "text"
      }
    ];
    element.records = [
      {
        index: 0,
        isActive: false,
        balance: 1256,
        age: 24,
        eyeColor: "green",
        name: "Harriet Noble",
        gender: "female",
        company: "UPDAT",
        email: "harrietnoble@updat.com",
        phone: "+1 (966) 451-2309"
      },
      {
        index: 1,
        isActive: false,
        balance: 2317.43,
        age: 26,
        eyeColor: "brown",
        name: "Delia Bonner",
        gender: "female",
        company: "SOLAREN",
        email: "deliabonner@solaren.com",
        phone: "+1 (970) 554-3357"
      },
      {
        index: 2,
        isActive: false,
        balance: 1373.74,
        age: 39,
        eyeColor: "brown",
        name: "Key Mooney",
        gender: "male",
        company: "VELOS",
        email: "keymooney@velos.com",
        phone: "+1 (948) 417-3771"
      },
      {
        index: 3,
        isActive: true,
        balance: 1623.21,
        age: 25,
        eyeColor: "green",
        name: "Perez Gibbs",
        gender: "male",
        company: "GEOLOGIX",
        email: "perezgibbs@geologix.com",
        phone: "+1 (972) 599-2440"
      },
      {
        index: 4,
        isActive: true,
        balance: 2358.19,
        age: 22,
        eyeColor: "blue",
        name: "Randolph Goodwin",
        gender: "male",
        company: "SNIPS",
        email: "randolphgoodwin@snips.com",
        phone: "+1 (973) 473-2613"
      }
    ];
    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      const rows = element.shadowRoot.querySelectorAll('[data-type="row"]');
      const cells = rows[0].querySelectorAll(".flex-datatable-cell");
      if (cells?.length) {
        expect(cells[0].getAttribute("tabindex")).toBe("0");
      }
      done();
    });
  });

  it("Check header is focusable", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.theme = "slds";
    element.issortavailable = "true";
    element.columns = dataset.columns;
    element.records = dataset.records;
    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      const headers = element.shadowRoot.querySelectorAll(".tableHeadCell");
      const firstHeader = headers[0];
      firstHeader.focus();
      // eslint-disable-next-line @lwc/lwc/no-async-operation
      setTimeout(() => {
        const iconEle = firstHeader.querySelector(".hover-icon");
        expect(iconEle.classList.contains("slds-transition-hide")).toBe(true);
        done();
      }, 0);
    }, 0);
  });

  it("Check row number is announced when we focus on checkbox in front of each row for lightning theme", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.theme = "slds";
    element.userSelectableRow = "true";
    element.issortavailable = "true";
    element.columns = [
      {
        fieldName: "index",
        label: "index",
        searchable: false,
        sortable: true,
        type: "text",
        showUserSelectableColumn: true
      },
      {
        editable: "true",
        fieldName: "isActive",
        label: "isActive",
        searchable: false,
        sortable: true,
        type: "text",
        showUserSelectableColumn: true
      },
      {
        fieldName: "balance",
        label: "balance",
        searchable: false,
        sortable: true,
        type: "text",
        showUserSelectableColumn: true
      }
    ];
    element.records = [
      {
        index: 0,
        isActive: false,
        balance: 1256
      },
      {
        index: 1,
        isActive: false,
        balance: 2317.43
      }
    ];
    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      const headers = element.shadowRoot.querySelectorAll(".tableHeadCell");
      const firstHeader = headers[0];

      const headerCheckbox = firstHeader.querySelector(".slds-checkbox");
      expect(headerCheckbox).not.toBeNull();
      expect(headerCheckbox.title).toBe("Select All");
      expect(headerCheckbox.getAttribute("aria-label")).toBe("Select All");

      const rows = element.shadowRoot.querySelectorAll('[data-type="row"]');
      expect(rows).toHaveLength(2);
      const firstRow = rows[0];

      const firstRowCheckbox = firstRow.querySelector(".slds-checkbox");
      expect(firstRowCheckbox).not.toBeNull();
      expect(firstRowCheckbox.title).toBe("Select Row 1");
      expect(firstRowCheckbox.getAttribute("aria-label")).toBe("Select Row 1");

      const secondRow = rows[1];

      const secondRowCheckbox = secondRow.querySelector(".slds-checkbox");
      expect(secondRowCheckbox).not.toBeNull();
      expect(secondRowCheckbox.title).toBe("Select Row 2");
      expect(secondRowCheckbox.getAttribute("aria-label")).toBe("Select Row 2");
      done();
    }, 0);
  });

  it("Check row number is announced when we focus on checkbox in front of each row for newport theme", done => {
    const element = createElement("c-data-table", {
      is: datatable
    });
    element.theme = "nds";
    element.userSelectableRow = "true";
    element.issortavailable = "true";
    element.columns = [
      {
        fieldName: "index",
        label: "index",
        searchable: false,
        sortable: true,
        type: "text",
        showUserSelectableColumn: true
      },
      {
        editable: "true",
        fieldName: "isActive",
        label: "isActive",
        searchable: false,
        sortable: true,
        type: "text",
        showUserSelectableColumn: true
      },
      {
        fieldName: "balance",
        label: "balance",
        searchable: false,
        sortable: true,
        type: "text",
        showUserSelectableColumn: true
      }
    ];
    element.records = [
      {
        index: 0,
        isActive: false,
        balance: 1256
      },
      {
        index: 1,
        isActive: false,
        balance: 2317.43
      }
    ];
    document.body.appendChild(element);
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    setTimeout(() => {
      const headers = element.shadowRoot.querySelectorAll(".tableHeadCell");
      const firstHeader = headers[0];

      const headerCheckbox = firstHeader.querySelector(".nds-checkbox");
      expect(headerCheckbox).not.toBeNull();
      expect(headerCheckbox.title).toBe("Select All");
      expect(headerCheckbox.getAttribute("aria-label")).toBe("Select All");

      const rows = element.shadowRoot.querySelectorAll('[data-type="row"]');
      expect(rows).toHaveLength(2);
      const firstRow = rows[0];

      const firstRowCheckbox = firstRow.querySelector(".nds-checkbox");
      expect(firstRowCheckbox).not.toBeNull();
      expect(firstRowCheckbox.title).toBe("Select Row 1");
      expect(firstRowCheckbox.getAttribute("aria-label")).toBe("Select Row 1");

      const secondRow = rows[1];

      const secondRowCheckbox = secondRow.querySelector(".nds-checkbox");
      expect(secondRowCheckbox).not.toBeNull();
      expect(secondRowCheckbox.title).toBe("Select Row 2");
      expect(secondRowCheckbox.getAttribute("aria-label")).toBe("Select Row 2");
      done();
    }, 0);
  });

  it.each`
    highlightSelection | highlightRow | dataIndexHighlighted
    ${true}            | ${""}        | ${0}
    ${"true"}          | ${""}        | ${0}
    ${true}            | ${"2"}       | ${2}
    ${false}           | ${"2"}       | ${-1}
    ${"false"}         | ${"2"}       | ${-1}
    ${"wrong value"}   | ${"2"}       | ${-1}
    ${true}            | ${"3"}       | ${3}
    ${true}            | ${"-1"}      | ${-1}
  `(
    "should highlight row $dataIndexHighlighted.",
    ({ highlightSelection, highlightRow, dataIndexHighlighted }, done) => {
      const element = createElement("c-data-table", {
        is: datatable
      });
      element.theme = "slds";
      document.body.appendChild(element);

      element.columns = [{ fieldName: "Name", label: "Name" }];
      element.records = [
        { id: "0", Name: "a" },
        { id: "1", Name: "b" },
        { id: "2", Name: "c" },
        { id: "3", Name: "d" }
      ];

      element.highlightSelection = highlightSelection;
      if (highlightRow) {
        element.highlightRow = highlightRow;
      }

      // eslint-disable-next-line @lwc/lwc/no-async-operation
      setTimeout(() => {
        const tableBody = element.shadowRoot.querySelector(
          ".slds-data-table-body"
        );
        if (tableBody) {
          const index = Array.from(tableBody.children).findIndex(tableRow =>
            tableRow.classList.contains("slds-data-table-row--active")
          );
          expect(index).toBe(dataIndexHighlighted);
        }
        done();
      });
    }
  );

  it.each`
    highlightSelection | highlightRow | dataIndexHighlighted
    ${true}            | ${"2"}       | ${2}
  `(
    "should highlight row $dataIndexHighlighted and disable highlight.",
    ({ highlightSelection, highlightRow, dataIndexHighlighted }, done) => {
      const element = createElement("c-data-table", {
        is: datatable
      });
      element.theme = "slds";
      document.body.appendChild(element);

      element.columns = [{ fieldName: "Name", label: "Name" }];
      element.records = [
        { id: "0", Name: "a" },
        { id: "1", Name: "b" },
        { id: "2", Name: "c" },
        { id: "3", Name: "d" }
      ];

      element.highlightSelection = highlightSelection;
      if (highlightRow) {
        element.highlightRow = highlightRow;
      }

      // eslint-disable-next-line @lwc/lwc/no-async-operation
      setTimeout(() => {
        const tableBody = element.shadowRoot.querySelector(
          ".slds-data-table-body"
        );
        if (tableBody) {
          const index = Array.from(tableBody.children).findIndex(tableRow =>
            tableRow.classList.contains("slds-data-table-row--active")
          );
          expect(index).toBe(dataIndexHighlighted);
          element.highlightSelection = false;
          // eslint-disable-next-line @lwc/lwc/no-async-operation
          setTimeout(() => {
            const indexVal = Array.from(
              tableBody.children
            ).findIndex(tableRow =>
              tableRow.classList.contains("slds-data-table-row--active")
            );
            expect(indexVal).toBe(-1);
            done();
          });
        }
      });
    }
  );
});
