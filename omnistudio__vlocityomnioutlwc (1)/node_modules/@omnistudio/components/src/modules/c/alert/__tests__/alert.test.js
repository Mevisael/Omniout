/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import alert from "c/alert";
import { createElement } from "lwc";

const message = "This is a sample message";

describe("c-alert", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-alert", {
      is: alert
    });
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  it("Shows the message", () => {
    const element = createElement("c-alert", {
      is: alert
    });
    element.message = message;
    document.body.appendChild(element);

    const h2Ele = element.shadowRoot.querySelectorAll("h2 > slot")[0];
    expect(h2Ele.textContent).toBe(message);
  });

  test("Different Variations Supported", () => {
    const element = createElement("c-alert", {
      is: alert
    });
    element.message = message;
    element.variation = "error";
    document.body.appendChild(element);

    const textEle = element.shadowRoot.querySelectorAll(
      ".slds-assistive-text"
    )[0];
    expect(textEle.textContent).toBe("error");
  });

  test("User can close alert", () => {
    const element = createElement("c-alert", {
      is: alert
    });
    element.message = message;
    element.variation = "error";
    element.dismissible = true;
    document.body.appendChild(element);

    const closeButtonEle = element.shadowRoot.querySelectorAll(
      ".slds-notify__close > button"
    )[0];
    closeButtonEle.click();
    return Promise.resolve().then(() => {
      expect(element.shadowRoot.children).toHaveLength(0);
    });
  });
});
