/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
/**
 * This is to workaround an issue with LWS where objects are coming from a red realm.
 *
 * To explain why does this make the trick:
 * There are APIs that are remapped to what we call system mode APIs, `Intl` is one of them,
 * meaning, all the details are going to be blue objects.
 * This API happens to have few methods that return normal objects, in this case blue objects...
 * what we do is to get a red obj (from your sandbox), and use Object.assign() to move the key/value pairs into the blue object.
 * @param {*} window
 * @param {*} data
 * @param {*} domain
 */
export function safePostMessage(window, data, domain) {
  window.postMessage(createSerializableObject(data), domain);
}

const RTF1 = new Intl.RelativeTimeFormat("en", { numeric: "auto" });

function createSerializableObject(obj) {
  if (typeof obj !== "object" || obj === null || obj === undefined) {
    return obj;
  }
  if (Array.isArray(obj)) {
    const parts = RTF1.formatToParts(10, "seconds");
    parts.splice(0, 3); // this emptys the array.
    obj.forEach(k => {
      parts.push(createSerializableObject(k));
    });
    return parts;
  }
  const o = new Intl.NumberFormat("en").resolvedOptions();
  Object.keys(o).forEach(k => delete o[k]);
  const newObj = Object.assign(o, obj);
  Object.keys(obj).forEach(k => {
    newObj[k] = createSerializableObject(obj[k]);
  });
  return newObj;
}
