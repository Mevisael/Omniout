/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable no-unused-vars */
import { createElement } from "lwc";
import VlocityTimePicker from "c/timePicker";

import { elementProperties, inputFormats, expected } from "./data/testData";

jest.mock(
  "@salesforce/label/c.cmpDayJsLocaleFormats",
  () => {
    return {
      default:
        '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

jest.mock(
  "@salesforce/label/c.cmpLocaleFormatsInvalid",
  () => {
    return {
      default:
        'Unable to render due to invalid localeFormat. Please provide a valid localeFormat in the form of {"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

describe("c-time-picker", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });
  // Check if the element is rendered in DOM
  it("Element rendered in DOM", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "slds";
    element.label = "Time";
    element.placeholder = "12:00";
    document.body.appendChild(element);

    const timePickerEl =
      element.shadowRoot.querySelectorAll(".slds-timepicker").length > 0
        ? true
        : false;

    expect(timePickerEl).toBe(true);
  });

  // Check if theme is set properly

  it(" Theme is  set properly ", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "nds";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.shadowRoot.querySelector("div").className).toContain(
        "nds"
      );
    });
  });

  // Check if Placeholder is working

  it(" Placeholder is set ", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.placeholder = "12:00";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.shadowRoot.querySelector("input").placeholder).toBe(
        "12:00"
      );
    });
  });

  // Check if Label is working

  it(" Label is set ", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "slds";
    element.label = "Time";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      let labelEl = element.shadowRoot.querySelector("label");
      let val =
        labelEl.className.indexOf("slds-form-element__label") !== -1
          ? true
          : false;
      expect(val).toBe(true);
    });
  });

  //check value for SOQL date format
  it("checks output value for SOQL date string format input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.value = inputFormats.soql;
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe("");
    });
  });

  //check value for ISO date format
  it("checks output value for ISO format date string input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.value = inputFormats.iso;
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe(expected.iso);
    });
  });

  //check value for string date format
  it("checks output value for Date String input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.value = inputFormats.dateString;
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe(expected.dateString);
    });
  });

  it("checks output value for time string input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.value = "10:30 pm";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe("10:30 pm");
    });
  });

  it("should verify correct startTime and endTime", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });
    element.interval = 30;
    document.body.appendChild(element);
    const timePickerInput = element.shadowRoot.querySelector(
      ".slds-combobox__input-value"
    );
    expect(timePickerInput).not.toBe(null);
    timePickerInput.dispatchEvent(new CustomEvent("mousedown"));
    return Promise.resolve().then(() => {
      const listbox = element.shadowRoot.querySelector(
        ".slds-listbox_vertical"
      );
      expect(listbox).not.toBe(null);
      expect(
        listbox.firstChild.querySelector(".slds-truncate").textContent
      ).toBe("12:00 am");
      expect(
        listbox.lastChild.querySelector(".slds-truncate").textContent
      ).toBe("11:30 pm");
    });
  });

  it("checks output value with format for time string input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.outputFormat = "HH:mm";
    element.value = "10:30 pm";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe("10:30 pm");
    });
  });

  it("checks if scroller set without click on time picker input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.outputFormat = "HH:mm";
    element.value = "10:30 pm";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");

    return Promise.resolve()
      .then(function() {
        input.dispatchEvent(new CustomEvent("blur"));
      })
      .then(() => {
        const scroll = input.getAttribute("scroll-click");
        expect(scroll).toBe(null);
      });
  });

  it("checks if scroller set after rendering list dropdown on input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.outputFormat = "HH:mm";
    element.value = "10:30 pm";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");

    return Promise.resolve()
      .then(function() {
        input.dispatchEvent(
          new MouseEvent("mousedown", {
            bubbles: true,
            cancelable: true
          })
        );
      })
      .then(() => {
        const listElem = element.shadowRoot.querySelectorAll("ul")[0];
        listElem.dispatchEvent(
          new MouseEvent("mousedown", {
            bubbles: true,
            cancelable: true
          })
        );
      })
      .then(() => {
        const scroll = input.getAttribute("scroll-click");
        expect(scroll).toBe("scroll");
      });
  });
  /**
   * A11y tests
   */

  it("check aria attributes are set", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.outputFormat = "HH:mm";
    element.label = "Sample Time";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");

    //Simulate keydown [down arrow] event on the input field
    return Promise.resolve()
      .then(() => {
        input.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
      })
      .then(() => {
        //Check aria-label is set
        expect(input.getAttribute("aria-label")).toBe("Sample Time");
      });
  });

  it("ariaLabel with * testing if required", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "slds";
    element.ariaLabel = "Time";
    element.required = true;
    element.placeholder = "12:00";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.shadowRoot.querySelector("input").ariaLabel).toBe("*Time");
    });
  });

  it("ariaLabel without * testing if not required", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "slds";
    element.ariaLabel = "Time1";
    element.required = false;
    element.placeholder = "12:00";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.shadowRoot.querySelector("input").ariaLabel).toBe("Time1");
    });
  });

  it("Check if role alert present on errormessageblock in slds theme", async () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.outputFormat = "HH:mm";
    element.theme = "slds";
    element.label = "Sample Time";
    document.body.appendChild(element);

    element.setCustomValidity("Error Message");
    expect(element.reportValidity()).toBe(false);
    return Promise.resolve().then(() => {
      const errorMessageBlock = element.shadowRoot.querySelector(
        ".slds-form-element__help"
      );
      expect(errorMessageBlock).not.toBeNull();
      expect(errorMessageBlock.role).toBe("alert");
    });
  });

  it("Check if role alert present on errormessageblock in newport theme", async () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.outputFormat = "HH:mm";
    element.theme = "nds";
    element.label = "Sample Time";
    document.body.appendChild(element);
    element.setCustomValidity("Error Message");
    expect(element.reportValidity()).toBe(false);
    return Promise.resolve().then(() => {
      const errorMessageBlock = element.shadowRoot.querySelector(
        ".nds-form-element__help"
      );
      expect(errorMessageBlock).not.toBeNull();
      expect(errorMessageBlock.role).toBe("alert");
    });
  });
});
