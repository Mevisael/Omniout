/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable no-unused-vars */
import { createElement } from "lwc";
import VlocityDatetimePicker from "c/datetimePicker";
import dayjs from "c/dayjs";

/**
 * WARNING: All the timezone tests should be run in "US/Eastern" timezone.
 * On linux and Mac you can set the TZ=US/Eastern environment variable or change your local computer timezone.
 * On Window's you'll have to change your computer timezone.
 */

jest.mock(
  "@salesforce/label/c.cmpDayJsLocaleFormats",
  () => {
    return {
      default:
        '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

jest.mock(
  "@salesforce/label/c.cmpLocaleFormatsInvalid",
  () => {
    return {
      default:
        'Unable to render due to invalid localeFormat. Please provide a valid localeFormat in the form of {"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

describe("c-datetime-picker", () => {
  beforeEach(() => {
    // check we're in US/Eastern timezone
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    if (timezone !== "US/Eastern" && timezone !== "America/New_York") {
      throw new Error(
        `These tests must be run in the US/Eastern timezone. Please change your timezone from ${timezone} and re-run`
      );
    }
  });

  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Check if theme is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.theme = "nds";
    document.body.appendChild(element);
    const el = element.shadowRoot.querySelector("div");
    let index = el.className.indexOf("nds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /* Check if label is set */
  it("Check If label is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    document.body.appendChild(element);
    const label = element.shadowRoot.querySelector("label");
    const dEl = element.shadowRoot.querySelector("c-date-picker");
    const tEl = element.shadowRoot.querySelector("c-time-picker");
    expect(label.textContent).toBe("Datetime Picker");
    expect(dEl.label).toBe("date");
    expect(tEl.label).toBe("time");
  });

  /*Check if the min is set*/
  it("Check If min is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    element.min = "2019-04-12T01:15:00";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const dEl = element.shadowRoot.querySelector("c-date-picker");
          expect(dEl.min).toBe("4/12/2019");
          resolve();
        }, 10);
      });
    });
  });

  /*Check if the max is set*/
  it("Check If max is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    element.max = "2019-04-12T01:15:00";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const dEl = element.shadowRoot.querySelector("c-date-picker");
          expect(dEl.max).toBe("4/12/2019");
          resolve();
        }, 10);
      });
    });
  });

  /*Check if the value is set*/
  it("Check If value is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    element.outputType = "date";
    let val = new Date("1970/1/1").toISOString();
    element.value = val;
    document.body.appendChild(element);
    const El = element;
    expect(El.value).toEqual(new Date(val));
  });

  /*Check if current date and time displays current date and time*/
  it("Check if current date and time displays current date and time", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";

    // simulates when a user selects the Today button on the date time picker
    const currentDate = new Date();
    element.value = currentDate;
    document.body.appendChild(element);

    const tEl = element.shadowRoot.querySelector("c-time-picker");
    const dEl = element.shadowRoot.querySelector("c-date-picker");

    // check to ensure the date is the same as the current date
    expect(dEl.value.getMonth()).toEqual(currentDate.getMonth());
    expect(dEl.value.getDate()).toEqual(currentDate.getDate());
    expect(dEl.value.getFullYear()).toEqual(currentDate.getFullYear());

    // check to ensure the time hours and minutes values are the same as the current time
    expect(tEl.value.getHours()).toEqual(currentDate.getHours());
    expect(tEl.value.getMinutes()).toEqual(currentDate.getMinutes());
  });

  it("Check if date and time with expected format is displayed MM/DD/YYYY", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    const currentDate = new Date();
    element.label = "Datetime Picker";
    element.outputFormat = "MM/DD/YYYY";
    element.value = currentDate;
    document.body.appendChild(element);
    const dEl = element.shadowRoot.querySelector("c-date-picker");

    // check to ensure the date is the same as the current date
    expect(dEl.value.getMonth()).toEqual(currentDate.getMonth());
    expect(dEl.value.getDate()).toEqual(currentDate.getDate());
    expect(dEl.value.getFullYear()).toEqual(currentDate.getFullYear());
  });

  it("Check if date and time with expected format is displayed DD-MM-YYYY", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    const currentDate = new Date();
    element.label = "Datetime Picker";
    element.outputFormat = "DD-MM-YYYY";
    element.value = currentDate;
    document.body.appendChild(element);
    const dEl = element.shadowRoot.querySelector("c-date-picker");

    // check to ensure the date is the same as the current date
    expect(dEl.value.getMonth()).toEqual(currentDate.getMonth());
    expect(dEl.value.getDate()).toEqual(currentDate.getDate());
    expect(dEl.value.getFullYear()).toEqual(currentDate.getFullYear());
  });

  it("Check if time picker is empty with no value", () => {
    const dlsDateTimeElement = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    dlsDateTimeElement.label = "Datetime Picker";
    dlsDateTimeElement.outputFormat = "DD-MM-YYYY";
    document.body.appendChild(dlsDateTimeElement);
    const dlsTimeElement = dlsDateTimeElement.shadowRoot.querySelector(
      "c-time-picker"
    );
    dlsDateTimeElement.value = "";
    return Promise.resolve().then(() => {
      expect(dlsTimeElement.displayValue).toEqual(null);
    });
  });

  it("Check value when time is selected via keyboard event", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "Date";
    element.timeLabel = "Time";
    element.timeFormat = "HH:mm";
    element.outputType = "date";
    element.timezone = "US/Pacific";

    // 10:59 in UTC = 02:59 in PST
    element.value = new Date("2022-01-25T10:59:00.000Z");
    document.body.appendChild(element);

    const timeEl = element.shadowRoot.querySelector("c-time-picker");

    timeEl.shadowRoot
      .querySelector("input")
      .dispatchEvent(new KeyboardEvent("keydown", { keyCode: 13 }));

    return Promise.resolve()
      .then(() => {
        const timeOptions = timeEl.shadowRoot.querySelectorAll(
          `.slds-listbox__option`
        );
        // Focuses the first 00:00 time option
        timeOptions[0].dispatchEvent(new CustomEvent("focus"));

        // Simulates pressing it via keyboard Enter event. This should make the time value
        // 08:00 in UTC = 00:00 in PST
        timeEl.shadowRoot
          .querySelector("input")
          .dispatchEvent(new KeyboardEvent("keydown", { keyCode: 13 }));
      })
      .then(() => {
        const expectedResultPst = new Date(
          "2022-01-25T08:00:00.000Z"
        ).toUTCString();
        expect(expectedResultPst).toEqual(
          new Date(element.value).toUTCString()
        );
      });
  });

  it("Check if time is cleared on clearing date", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "Date";
    element.timeLabel = "Time";
    element.timeFormat = "HH:mm";
    element.outputType = "date";

    const setDate = new Date("2022-01-25T10:59:00.000Z");
    element.value = setDate;
    document.body.appendChild(element);

    const dateEl = element.shadowRoot.querySelector("c-date-picker");
    const timeEl = element.shadowRoot.querySelector("c-time-picker");

    // Check Date value is what we set
    expect(dateEl.value.getMonth()).toEqual(setDate.getMonth());
    expect(dateEl.value.getDate()).toEqual(setDate.getDate());
    expect(dateEl.value.getFullYear()).toEqual(setDate.getFullYear());

    // Check time Value is set
    expect(timeEl.value.getHours()).toEqual(setDate.getHours());
    expect(timeEl.value.getMinutes()).toEqual(setDate.getMinutes());

    // Set date value to null
    dateEl.value = "";
    dateEl.dispatchEvent(new CustomEvent("change"));

    return Promise.resolve().then(() => {
      // Expect time element value to be empty;
      expect(timeEl.value).toEqual("");
    });
  });

  describe("timezone tests", () => {
    it("Check datetime picker displays correct value when daylight savings is active", () => {
      const dlsDateTimeElement = createElement("c-datetime-picker", {
        is: VlocityDatetimePicker
      });
      dlsDateTimeElement.label = "Datetime Picker Within Daylight Savings";
      dlsDateTimeElement.dateLabel = "Date";
      dlsDateTimeElement.timeLabel = "Time";
      dlsDateTimeElement.outputFormat = "DD-MM-YYYY";
      dlsDateTimeElement.timeFormat = "HH:mm a";
      dlsDateTimeElement.value = new Date("2021-11-07T05:59:00.000Z"); // Date Time within DLS
      document.body.appendChild(dlsDateTimeElement);
      const dlsTimeElement = dlsDateTimeElement.shadowRoot.querySelector(
        "c-time-picker"
      );

      expect(dlsTimeElement.displayValue).toEqual("01:59 am");
      expect(dlsDateTimeElement.displayValue).toEqual("11/7/2021 01:59 am");
    });

    it("Check datetime picker displays correct value when daylight savings is not active", () => {
      const notDlsDateTimeElement = createElement("c-datetime-picker", {
        is: VlocityDatetimePicker
      });
      notDlsDateTimeElement.label =
        "Datetime Picker Outside of Daylight Savings";
      notDlsDateTimeElement.dateLabel = "Date";
      notDlsDateTimeElement.timeLabel = "Time";
      notDlsDateTimeElement.outputFormat = "DD-MM-YYYY";
      notDlsDateTimeElement.timeFormat = "HH:mm a";
      notDlsDateTimeElement.value = new Date("2021-11-07T07:00:00.000Z");
      document.body.appendChild(notDlsDateTimeElement);
      const notDlsTimeElement = notDlsDateTimeElement.shadowRoot.querySelector(
        "c-time-picker"
      );

      expect(notDlsTimeElement.displayValue).toEqual("02:00 am");
      expect(notDlsDateTimeElement.displayValue).toEqual("11/7/2021 02:00 am");
    });

    it("Check datetime picker displays correct value when daylight savings is active and set to user timezone", () => {
      const dlsDateTimeElement = createElement("c-datetime-picker", {
        is: VlocityDatetimePicker
      });
      dlsDateTimeElement.label = "Datetime Picker Within Daylight Savings";
      dlsDateTimeElement.dateLabel = "Date";
      dlsDateTimeElement.timeLabel = "Time";
      dlsDateTimeElement.outputFormat = "DD-MM-YYYY";
      dlsDateTimeElement.timeFormat = "HH:mm a";
      dlsDateTimeElement.timezone = "US/Pacific";
      dlsDateTimeElement.value = new Date("2021-11-07T09:59:00.000Z"); // Date Time within DLS
      document.body.appendChild(dlsDateTimeElement);
      const dlsTimeElement = dlsDateTimeElement.shadowRoot.querySelector(
        "c-time-picker"
      );

      expect(dlsTimeElement.displayValue).toEqual("01:59 am");
      expect(dlsDateTimeElement.displayValue).toEqual("11/7/2021 01:59 am");
    });

    it("Check datetime picker displays correct value when daylight savings is active and set to user timezone as offset", () => {
      const dlsDateTimeElement = createElement("c-datetime-picker", {
        is: VlocityDatetimePicker
      });
      dlsDateTimeElement.label = "Datetime Picker Within Daylight Savings";
      dlsDateTimeElement.dateLabel = "Date";
      dlsDateTimeElement.timeLabel = "Time";
      dlsDateTimeElement.outputFormat = "DD-MM-YYYY";
      dlsDateTimeElement.timeFormat = "HH:mm a";
      dlsDateTimeElement.timezone = 480;
      dlsDateTimeElement.value = new Date("2021-11-07T09:59:00.000Z"); // Date Time within DLS
      document.body.appendChild(dlsDateTimeElement);
      const dlsTimeElement = dlsDateTimeElement.shadowRoot.querySelector(
        "c-time-picker"
      );

      expect(dlsTimeElement.displayValue).toEqual("01:59 am");
      expect(dlsDateTimeElement.displayValue).toEqual("11/7/2021 01:59 am");
    });

    it("Check datetime picker displays correct value when daylight savings is not active and set to user timezone", () => {
      const notDlsDateTimeElement = createElement("c-datetime-picker", {
        is: VlocityDatetimePicker
      });
      notDlsDateTimeElement.label =
        "Datetime Picker Outside of Daylight Savings";
      notDlsDateTimeElement.dateLabel = "Date";
      notDlsDateTimeElement.timeLabel = "Time";
      notDlsDateTimeElement.outputFormat = "DD-MM-YYYY";
      notDlsDateTimeElement.timeFormat = "HH:mm a";
      notDlsDateTimeElement.timezone = "US/Pacific";
      notDlsDateTimeElement.value = new Date("2021-11-07T10:00:00.000Z");
      document.body.appendChild(notDlsDateTimeElement);
      const notDlsTimeElement = notDlsDateTimeElement.shadowRoot.querySelector(
        "c-time-picker"
      );

      expect(notDlsTimeElement.displayValue).toEqual("02:00 am");
      expect(notDlsDateTimeElement.displayValue).toEqual("11/7/2021 02:00 am");
    });
  });

  describe("timepicker changes test", () => {
    generateTestsForTimePickerChanges({
      "correctly changes time when user selects new time": {
        timezone: null,
        // set to Midnight in local (i.e  eastern => 04:00 UTC)
        newTime: "00:00 am",
        expectedDate: new Date("2021-11-07T04:00:00.000Z"),
        expectedTimeDisplayValue: "00:00 am",
        expectedDateTimeDisplayValue: "11/7/2021 00:00 am"
      },
      "correctly changes time when user selects new time and in user timezone": {
        timezone: "US/Pacific",
        // set to Midnight in user (i.e  pacific => 08:00 UTC)
        newTime: "00:00 am",
        expectedDate: new Date("2021-11-07T07:00:00.000Z"),
        expectedTimeDisplayValue: "00:00 am",
        expectedDateTimeDisplayValue: "11/7/2021 00:00 am"
      },
      "correctly changes time when user selects new time and in user timezone as offset": {
        timezone: 480,
        // set to Midnight in user (i.e  pacific => 07:00 UTC)
        newTime: "00:00 am",
        expectedDate: new Date("2021-11-07T07:00:00.000Z"),
        expectedTimeDisplayValue: "00:00 am",
        expectedDateTimeDisplayValue: "11/7/2021 00:00 am"
      },
      "correctly changes time when user selects new time and in user timezone 2am": {
        timezone: "US/Pacific",
        // set to 2am in user (i.e  pacific => 10:00 UTC)
        newTime: "02:00 am",
        expectedDate: new Date("2021-11-07T10:00:00.000Z"),
        expectedTimeDisplayValue: "02:00 am",
        expectedDateTimeDisplayValue: "11/7/2021 02:00 am"
      },
      "correctly changes time when user selects new time and in user timezone as offset 2am": {
        timezone: 480,
        // set to 2am in user (i.e  480 => 10:00 UTC)
        newTime: "02:00 am",
        expectedDate: new Date("2021-11-07T10:00:00.000Z"),
        expectedTimeDisplayValue: "02:00 am",
        expectedDateTimeDisplayValue: "11/7/2021 02:00 am"
      }
      //next check it rolls forward to next day if date is next day in utc
    });
  });

  function generateTestsForTimePickerChanges(testCases) {
    Object.keys(testCases).forEach(function(key) {
      it(key, function() {
        //expect.assertions(3);
        const dlsDateTimeElement = createElement("c-datetime-picker", {
          is: VlocityDatetimePicker
        });
        dlsDateTimeElement.label = "Datetime Picker Within Daylight Savings";
        dlsDateTimeElement.dateLabel = "Date";
        dlsDateTimeElement.timeLabel = "Time";
        dlsDateTimeElement.timeFormat = "HH:mm a";
        dlsDateTimeElement.outputType = "date";
        dlsDateTimeElement.timezone = testCases[key].timezone;
        // this is 09:59 in UTC which is 01:59 Pacific
        dlsDateTimeElement.value = new Date("2021-11-07T05:59:00.000Z");
        // Date Time within DLS
        document.body.appendChild(dlsDateTimeElement);
        const dlsTimeElement = dlsDateTimeElement.shadowRoot.querySelector(
          "c-time-picker"
        );

        // this is midnight in US Pacific (timepicker has no timezone concept)
        // dlsTimeElement.value = new Date(testCases[key].newTimeAsDate);
        // expect(dlsTimeElement.querySelector('input')).not.toBe(null);
        dlsTimeElement.shadowRoot
          .querySelector("input")
          .dispatchEvent(new Event("mousedown"));
        return Promise.resolve()
          .then(() => {
            Array.from(
              dlsTimeElement.shadowRoot.querySelectorAll(
                `.slds-listbox__option`
              )
            )
              .find(el => {
                return el.textContent?.trim() === testCases[key].newTime;
              })
              .dispatchEvent(new Event("mousedown"));
          })
          .then(() => {
            // the underlying value should now be in UTC, so midnight in pacific is 07am in utc
            expect(dlsDateTimeElement.value.toUTCString()).toEqual(
              new Date(testCases[key].expectedDate).toUTCString()
            );
            expect(dlsTimeElement.displayValue).toEqual(
              testCases[key].expectedTimeDisplayValue
            );
            expect(dlsDateTimeElement.displayValue).toEqual(
              testCases[key].expectedDateTimeDisplayValue
            );
          });
      });
    });
  }
});
